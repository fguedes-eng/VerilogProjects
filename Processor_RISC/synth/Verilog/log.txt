
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog RISC_V.v ALU.v Control_unit.v Data_memory.v Instruction_decoder.v Instruction_memory.v Multiplexers.v Program_Counter.v Registers.v; hierarchy -top RISC_V; synth; write_json RISC_V.json' --

1. Executing Verilog-2005 frontend: RISC_V.v
Parsing Verilog input from `RISC_V.v' to AST representation.
Generating RTLIL representation for module `\RISC_V'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ALU.v
Parsing Verilog input from `ALU.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: Control_unit.v
Parsing Verilog input from `Control_unit.v' to AST representation.
Generating RTLIL representation for module `\Control_unit'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: Data_memory.v
Parsing Verilog input from `Data_memory.v' to AST representation.
Generating RTLIL representation for module `\Data_memory'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: Instruction_decoder.v
Parsing Verilog input from `Instruction_decoder.v' to AST representation.
Generating RTLIL representation for module `\Instruction_decoder'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: Instruction_memory.v
Parsing Verilog input from `Instruction_memory.v' to AST representation.
Generating RTLIL representation for module `\Instruction_memory'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: Multiplexers.v
Parsing Verilog input from `Multiplexers.v' to AST representation.
Generating RTLIL representation for module `\Multiplexers'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: Program_Counter.v
Parsing Verilog input from `Program_Counter.v' to AST representation.
Generating RTLIL representation for module `\Program_Counter'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: Registers.v
Parsing Verilog input from `Registers.v' to AST representation.
Generating RTLIL representation for module `\Registers'.
Warning: Replacing memory \reg_cell with list of registers. See Registers.v:28
Successfully finished Verilog frontend.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \Registers
Used module:     \Program_Counter
Used module:     \Multiplexers
Used module:     \Instruction_memory
Used module:     \Instruction_decoder
Used module:     \Data_memory
Used module:     \Control_unit
Used module:     \ALU

10.2. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \Registers
Used module:     \Program_Counter
Used module:     \Multiplexers
Used module:     \Instruction_memory
Used module:     \Instruction_decoder
Used module:     \Data_memory
Used module:     \Control_unit
Used module:     \ALU
Removed 0 unused modules.

11. Executing SYNTH pass.

11.1. Executing HIERARCHY pass (managing design hierarchy).

11.1.1. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \Registers
Used module:     \Program_Counter
Used module:     \Multiplexers
Used module:     \Instruction_memory
Used module:     \Instruction_decoder
Used module:     \Data_memory
Used module:     \Control_unit
Used module:     \ALU

11.1.2. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \Registers
Used module:     \Program_Counter
Used module:     \Multiplexers
Used module:     \Instruction_memory
Used module:     \Instruction_decoder
Used module:     \Data_memory
Used module:     \Control_unit
Used module:     \ALU
Removed 0 unused modules.

11.2. Executing PROC pass (convert processes to netlists).

11.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$Registers.v:0$166 in module Registers.
Marked 1 switch rules as full_case in process $proc$Registers.v:0$166 in module Registers.
Removed 1 dead cases from process $proc$Registers.v:0$163 in module Registers.
Marked 1 switch rules as full_case in process $proc$Registers.v:0$163 in module Registers.
Marked 3 switch rules as full_case in process $proc$Registers.v:24$150 in module Registers.
Marked 1 switch rules as full_case in process $proc$Program_Counter.v:11$145 in module Program_Counter.
Marked 1 switch rules as full_case in process $proc$Multiplexers.v:90$144 in module Multiplexers.
Removed 1 dead cases from process $proc$Multiplexers.v:84$143 in module Multiplexers.
Marked 1 switch rules as full_case in process $proc$Multiplexers.v:84$143 in module Multiplexers.
Removed 1 dead cases from process $proc$Multiplexers.v:78$142 in module Multiplexers.
Marked 1 switch rules as full_case in process $proc$Multiplexers.v:78$142 in module Multiplexers.
Removed 1 dead cases from process $proc$Multiplexers.v:70$141 in module Multiplexers.
Marked 1 switch rules as full_case in process $proc$Multiplexers.v:70$141 in module Multiplexers.
Marked 1 switch rules as full_case in process $proc$Instruction_decoder.v:29$131 in module Instruction_decoder.
Marked 2 switch rules as full_case in process $proc$Data_memory.v:32$57 in module Data_memory.
Marked 1 switch rules as full_case in process $proc$Data_memory.v:24$35 in module Data_memory.
Removed 5 dead cases from process $proc$Control_unit.v:70$20 in module Control_unit.
Marked 9 switch rules as full_case in process $proc$Control_unit.v:70$20 in module Control_unit.
Marked 1 switch rules as full_case in process $proc$ALU.v:28$1 in module ALU.
Removed a total of 10 dead cases.

11.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 50 assignments to connections.

11.2.4. Executing PROC_INIT pass (extract init attributes).

11.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\Registers.$proc$Registers.v:24$150'.
Found async reset \rst in `\Program_Counter.$proc$Program_Counter.v:11$145'.

11.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~22 debug messages>

11.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Registers.$proc$Registers.v:0$166'.
     1/1: $1$mem2reg_rd$\reg_cell$Registers.v:33$149_DATA[31:0]$168
Creating decoders for process `\Registers.$proc$Registers.v:0$163'.
     1/1: $1$mem2reg_rd$\reg_cell$Registers.v:32$148_DATA[31:0]$165
Creating decoders for process `\Registers.$proc$Registers.v:24$150'.
     1/37: $2$mem2reg_wr$\reg_cell$Registers.v:31$147_ADDR[4:0]$157
     2/37: $2$mem2reg_wr$\reg_cell$Registers.v:31$147_DATA[31:0]$158
     3/37: $1$mem2reg_wr$\reg_cell$Registers.v:31$147_DATA[31:0]$154
     4/37: $1$mem2reg_wr$\reg_cell$Registers.v:31$147_ADDR[4:0]$153
     5/37: $1\sv2v_autoblock_1.i[31:0]
     6/37: $0\reg_cell[31][31:0]
     7/37: $0\reg_cell[30][31:0]
     8/37: $0\reg_cell[29][31:0]
     9/37: $0\reg_cell[28][31:0]
    10/37: $0\reg_cell[27][31:0]
    11/37: $0\reg_cell[26][31:0]
    12/37: $0\reg_cell[25][31:0]
    13/37: $0\reg_cell[24][31:0]
    14/37: $0\reg_cell[23][31:0]
    15/37: $0\reg_cell[22][31:0]
    16/37: $0\reg_cell[21][31:0]
    17/37: $0\reg_cell[20][31:0]
    18/37: $0\reg_cell[19][31:0]
    19/37: $0\reg_cell[18][31:0]
    20/37: $0\reg_cell[17][31:0]
    21/37: $0\reg_cell[16][31:0]
    22/37: $0\reg_cell[15][31:0]
    23/37: $0\reg_cell[14][31:0]
    24/37: $0\reg_cell[13][31:0]
    25/37: $0\reg_cell[12][31:0]
    26/37: $0\reg_cell[11][31:0]
    27/37: $0\reg_cell[10][31:0]
    28/37: $0\reg_cell[9][31:0]
    29/37: $0\reg_cell[8][31:0]
    30/37: $0\reg_cell[7][31:0]
    31/37: $0\reg_cell[6][31:0]
    32/37: $0\reg_cell[5][31:0]
    33/37: $0\reg_cell[4][31:0]
    34/37: $0\reg_cell[3][31:0]
    35/37: $0\reg_cell[2][31:0]
    36/37: $0\reg_cell[1][31:0]
    37/37: $0\reg_cell[0][31:0]
Creating decoders for process `\Program_Counter.$proc$Program_Counter.v:11$145'.
     1/1: $0\addr_out[31:0]
Creating decoders for process `\Multiplexers.$proc$Multiplexers.v:90$144'.
     1/1: $1\pc_out[31:0]
Creating decoders for process `\Multiplexers.$proc$Multiplexers.v:84$143'.
     1/1: $1\alu2_out[31:0]
Creating decoders for process `\Multiplexers.$proc$Multiplexers.v:78$142'.
     1/1: $1\alu1_out[31:0]
Creating decoders for process `\Multiplexers.$proc$Multiplexers.v:70$141'.
     1/1: $1\wb_out[31:0]
Creating decoders for process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131'.
     1/6: $1\funct7[6:0]
     2/6: $1\rs2[4:0]
     3/6: $1\rs1[4:0]
     4/6: $1\funct3[2:0]
     5/6: $1\rd[4:0]
     6/6: $1\imm[31:0]
Creating decoders for process `\Data_memory.$proc$Data_memory.v:32$57'.
     1/46: $2$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$108
     2/46: $2$memwr$\mem_cell$Data_memory.v:35$28_DATA[7:0]$107
     3/46: $2$memwr$\mem_cell$Data_memory.v:35$28_ADDR[11:0]$106
     4/46: $2$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$126
     5/46: $2$memwr$\mem_cell$Data_memory.v:0$34_DATA[7:0]$125
     6/46: $2$memwr$\mem_cell$Data_memory.v:0$34_ADDR[11:0]$124
     7/46: $2$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$123
     8/46: $2$memwr$\mem_cell$Data_memory.v:0$33_DATA[7:0]$122
     9/46: $2$memwr$\mem_cell$Data_memory.v:0$33_ADDR[31:0]$121
    10/46: $2$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$120
    11/46: $2$memwr$\mem_cell$Data_memory.v:0$32_DATA[7:0]$119
    12/46: $2$memwr$\mem_cell$Data_memory.v:0$32_ADDR[31:0]$118
    13/46: $2$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$117
    14/46: $2$memwr$\mem_cell$Data_memory.v:0$31_DATA[7:0]$116
    15/46: $2$memwr$\mem_cell$Data_memory.v:0$31_ADDR[31:0]$115
    16/46: $2$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$114
    17/46: $2$memwr$\mem_cell$Data_memory.v:0$30_DATA[7:0]$113
    18/46: $2$memwr$\mem_cell$Data_memory.v:0$30_ADDR[11:0]$112
    19/46: $2$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$111
    20/46: $2$memwr$\mem_cell$Data_memory.v:0$29_DATA[7:0]$110
    21/46: $2$memwr$\mem_cell$Data_memory.v:0$29_ADDR[31:0]$109
    22/46: $2$splitcmplxassign$Data_memory.v:37$25[31:0]$105
    23/46: $2$splitcmplxassign$Data_memory.v:36$24[15:0]$104
    24/46: $1$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$103
    25/46: $1$memwr$\mem_cell$Data_memory.v:0$34_DATA[7:0]$102
    26/46: $1$memwr$\mem_cell$Data_memory.v:0$34_ADDR[11:0]$101
    27/46: $1$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$100
    28/46: $1$memwr$\mem_cell$Data_memory.v:0$33_DATA[7:0]$99
    29/46: $1$memwr$\mem_cell$Data_memory.v:0$33_ADDR[31:0]$98
    30/46: $1$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$97
    31/46: $1$memwr$\mem_cell$Data_memory.v:0$32_DATA[7:0]$96
    32/46: $1$memwr$\mem_cell$Data_memory.v:0$32_ADDR[31:0]$95
    33/46: $1$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$94
    34/46: $1$memwr$\mem_cell$Data_memory.v:0$31_DATA[7:0]$93
    35/46: $1$memwr$\mem_cell$Data_memory.v:0$31_ADDR[31:0]$92
    36/46: $1$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$91
    37/46: $1$memwr$\mem_cell$Data_memory.v:0$30_DATA[7:0]$90
    38/46: $1$memwr$\mem_cell$Data_memory.v:0$30_ADDR[11:0]$89
    39/46: $1$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$88
    40/46: $1$memwr$\mem_cell$Data_memory.v:0$29_DATA[7:0]$87
    41/46: $1$memwr$\mem_cell$Data_memory.v:0$29_ADDR[31:0]$86
    42/46: $1$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$85
    43/46: $1$memwr$\mem_cell$Data_memory.v:35$28_DATA[7:0]$84
    44/46: $1$memwr$\mem_cell$Data_memory.v:35$28_ADDR[11:0]$83
    45/46: $1$splitcmplxassign$Data_memory.v:37$25[31:0]$82
    46/46: $1$splitcmplxassign$Data_memory.v:36$24[15:0]$81
Creating decoders for process `\Data_memory.$proc$Data_memory.v:24$35'.
     1/3: $1\rd_data[31:0]
     2/3: $1$mem2bits$\mem_cell$Data_memory.v:26$26[7:0]$38
     3/3: $1$mem2bits$\mem_cell$Data_memory.v:27$27[7:0]$39
Creating decoders for process `\Control_unit.$proc$Control_unit.v:70$20'.
     1/16: $7\ALUop[3:0]
     2/16: $6\ALUop[3:0]
     3/16: $5\ALUop[3:0]
     4/16: $4\ALUop[3:0]
     5/16: $3\ALUop[3:0]
     6/16: $3\memRWSize[2:0]
     7/16: $2\memRWSize[2:0]
     8/16: $2\ALUop[3:0]
     9/16: $1\ALUop[3:0]
    10/16: $1\memRWSize[2:0]
    11/16: $1\PCSel[1:0]
    12/16: $1\ALUReg2ImmSel[0:0]
    13/16: $1\ALUReg1PCSel[0:0]
    14/16: $1\WBSel[1:0]
    15/16: $1\regWrite[0:0]
    16/16: $1\memWrite[0:0]
Creating decoders for process `\ALU.$proc$ALU.v:28$1'.
     1/1: $1\out[31:0]

11.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Registers.$mem2reg_rd$\reg_cell$Registers.v:33$149_DATA' from process `\Registers.$proc$Registers.v:0$166'.
No latch inferred for signal `\Registers.$mem2reg_rd$\reg_cell$Registers.v:32$148_DATA' from process `\Registers.$proc$Registers.v:0$163'.
Latch inferred for signal `\Multiplexers.\pc_out' from process `\Multiplexers.$proc$Multiplexers.v:90$144': $auto$proc_dlatch.cc:427:proc_dlatch$1446
No latch inferred for signal `\Multiplexers.\alu2_out' from process `\Multiplexers.$proc$Multiplexers.v:84$143'.
No latch inferred for signal `\Multiplexers.\alu1_out' from process `\Multiplexers.$proc$Multiplexers.v:78$142'.
No latch inferred for signal `\Multiplexers.\wb_out' from process `\Multiplexers.$proc$Multiplexers.v:70$141'.
Latch inferred for signal `\Instruction_decoder.\rd' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1475
Latch inferred for signal `\Instruction_decoder.\rs1' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1504
Latch inferred for signal `\Instruction_decoder.\rs2' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1527
Latch inferred for signal `\Instruction_decoder.\funct3' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1556
Latch inferred for signal `\Instruction_decoder.\funct7' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1567
Latch inferred for signal `\Instruction_decoder.\imm' from process `\Instruction_decoder.$proc$Instruction_decoder.v:29$131': $auto$proc_dlatch.cc:427:proc_dlatch$1602
No latch inferred for signal `\Data_memory.$mem2bits$\mem_cell$Data_memory.v:26$26' from process `\Data_memory.$proc$Data_memory.v:24$35'.
No latch inferred for signal `\Data_memory.$mem2bits$\mem_cell$Data_memory.v:27$27' from process `\Data_memory.$proc$Data_memory.v:24$35'.
Latch inferred for signal `\Data_memory.\rd_data' from process `\Data_memory.$proc$Data_memory.v:24$35': $auto$proc_dlatch.cc:427:proc_dlatch$1637
Latch inferred for signal `\Control_unit.\regWrite' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$1696
Latch inferred for signal `\Control_unit.\ALUop' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$1875
Latch inferred for signal `\Control_unit.\memWrite' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$1934
Latch inferred for signal `\Control_unit.\WBSel' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$1993
Latch inferred for signal `\Control_unit.\ALUReg1PCSel' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$2052
Latch inferred for signal `\Control_unit.\ALUReg2ImmSel' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$2111
Latch inferred for signal `\Control_unit.\PCSel' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$2170
Latch inferred for signal `\Control_unit.\memRWSize' from process `\Control_unit.$proc$Control_unit.v:70$20': $auto$proc_dlatch.cc:427:proc_dlatch$2277
No latch inferred for signal `\ALU.\out' from process `\ALU.$proc$ALU.v:28$1'.

11.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Registers.\sv2v_autoblock_1.i' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2278' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[0]' using process `\Registers.$proc$Registers.v:24$150'.
  created $dff cell `$procdff$2281' with positive edge clock.
Creating register for signal `\Registers.\reg_cell[1]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2282' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[2]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2283' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[3]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2284' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[4]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2285' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[5]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2286' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[6]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2287' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[7]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2288' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[8]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2289' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[9]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2290' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[10]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2291' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[11]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2292' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[12]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2293' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[13]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2294' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[14]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2295' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[15]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2296' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[16]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2297' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[17]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2298' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[18]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2299' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[19]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2300' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[20]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2301' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[21]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2302' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[22]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2303' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[23]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2304' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[24]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2305' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[25]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2306' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[26]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2307' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[27]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2308' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[28]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2309' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[29]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2310' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[30]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2311' with positive edge clock and positive level reset.
Creating register for signal `\Registers.\reg_cell[31]' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2312' with positive edge clock and positive level reset.
Creating register for signal `\Registers.$mem2reg_wr$\reg_cell$Registers.v:31$147_ADDR' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2313' with positive edge clock and positive level reset.
Creating register for signal `\Registers.$mem2reg_wr$\reg_cell$Registers.v:31$147_DATA' using process `\Registers.$proc$Registers.v:24$150'.
  created $adff cell `$procdff$2314' with positive edge clock and positive level reset.
Creating register for signal `\Program_Counter.\addr_out' using process `\Program_Counter.$proc$Program_Counter.v:11$145'.
  created $adff cell `$procdff$2315' with positive edge clock and positive level reset.
Creating register for signal `\Data_memory.$splitcmplxassign$Data_memory.v:36$24' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2316' with positive edge clock.
Creating register for signal `\Data_memory.$splitcmplxassign$Data_memory.v:37$25' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2317' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:35$28_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2318' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:35$28_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2319' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:35$28_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2320' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$29_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2321' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$29_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2322' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$29_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2323' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$30_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2324' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$30_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2325' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$30_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2326' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$31_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2327' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$31_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2328' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$31_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2329' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$32_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2330' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$32_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2331' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$32_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2332' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$33_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2333' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$33_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2334' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$33_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2335' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$34_ADDR' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2336' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$34_DATA' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2337' with positive edge clock.
Creating register for signal `\Data_memory.$memwr$\mem_cell$Data_memory.v:0$34_EN' using process `\Data_memory.$proc$Data_memory.v:32$57'.
  created $dff cell `$procdff$2338' with positive edge clock.

11.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

11.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\Registers.$proc$Registers.v:0$166'.
Removing empty process `Registers.$proc$Registers.v:0$166'.
Found and cleaned up 1 empty switch in `\Registers.$proc$Registers.v:0$163'.
Removing empty process `Registers.$proc$Registers.v:0$163'.
Found and cleaned up 2 empty switches in `\Registers.$proc$Registers.v:24$150'.
Removing empty process `Registers.$proc$Registers.v:24$150'.
Removing empty process `Program_Counter.$proc$Program_Counter.v:11$145'.
Found and cleaned up 1 empty switch in `\Multiplexers.$proc$Multiplexers.v:90$144'.
Removing empty process `Multiplexers.$proc$Multiplexers.v:90$144'.
Found and cleaned up 1 empty switch in `\Multiplexers.$proc$Multiplexers.v:84$143'.
Removing empty process `Multiplexers.$proc$Multiplexers.v:84$143'.
Found and cleaned up 1 empty switch in `\Multiplexers.$proc$Multiplexers.v:78$142'.
Removing empty process `Multiplexers.$proc$Multiplexers.v:78$142'.
Found and cleaned up 1 empty switch in `\Multiplexers.$proc$Multiplexers.v:70$141'.
Removing empty process `Multiplexers.$proc$Multiplexers.v:70$141'.
Found and cleaned up 1 empty switch in `\Instruction_decoder.$proc$Instruction_decoder.v:29$131'.
Removing empty process `Instruction_decoder.$proc$Instruction_decoder.v:29$131'.
Found and cleaned up 2 empty switches in `\Data_memory.$proc$Data_memory.v:32$57'.
Removing empty process `Data_memory.$proc$Data_memory.v:32$57'.
Found and cleaned up 1 empty switch in `\Data_memory.$proc$Data_memory.v:24$35'.
Removing empty process `Data_memory.$proc$Data_memory.v:24$35'.
Found and cleaned up 9 empty switches in `\Control_unit.$proc$Control_unit.v:70$20'.
Removing empty process `Control_unit.$proc$Control_unit.v:70$20'.
Found and cleaned up 1 empty switch in `\ALU.$proc$ALU.v:28$1'.
Removing empty process `ALU.$proc$ALU.v:28$1'.
Cleaned up 22 empty switches.

11.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module Registers.
<suppressed ~6 debug messages>
Optimizing module Program_Counter.
Optimizing module Multiplexers.
<suppressed ~10 debug messages>
Optimizing module Instruction_memory.
<suppressed ~1 debug messages>
Optimizing module Instruction_decoder.
<suppressed ~40 debug messages>
Optimizing module Data_memory.
<suppressed ~13 debug messages>
Optimizing module Control_unit.
<suppressed ~153 debug messages>
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module RISC_V.

11.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module Registers.
Optimizing module Program_Counter.
Optimizing module Multiplexers.
Optimizing module Instruction_memory.
<suppressed ~3 debug messages>
Optimizing module Instruction_decoder.
Optimizing module Data_memory.
Optimizing module Control_unit.
Optimizing module ALU.
Optimizing module RISC_V.

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Registers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \RISC_V..
Removed 65 unused cells and 521 unused wires.
<suppressed ~76 debug messages>

11.5. Executing CHECK pass (checking for obvious problems).
Checking module ALU...
Checking module Control_unit...
Checking module Data_memory...
Checking module Instruction_decoder...
Checking module Instruction_memory...
Checking module Multiplexers...
Checking module Program_Counter...
Checking module RISC_V...
Checking module Registers...
Found and reported 0 problems.

11.6. Executing OPT pass (performing simple optimizations).

11.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
<suppressed ~6 debug messages>
Finding identical cells in module `\Control_unit'.
<suppressed ~606 debug messages>
Finding identical cells in module `\Data_memory'.
<suppressed ~153 debug messages>
Finding identical cells in module `\Instruction_decoder'.
<suppressed ~135 debug messages>
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
<suppressed ~6 debug messages>
Removed a total of 302 cells.

11.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1027.
    dead port 2/2 on $mux $procmux$1033.
    dead port 2/2 on $mux $procmux$1039.
    dead port 2/2 on $mux $procmux$1045.
    dead port 2/2 on $mux $procmux$1051.
    dead port 2/2 on $mux $procmux$1058.
    dead port 2/2 on $mux $procmux$1065.
    dead port 2/2 on $mux $procmux$1072.
    dead port 2/2 on $mux $procmux$1015.
    dead port 2/2 on $mux $procmux$1079.
    dead port 2/2 on $mux $procmux$1086.
    dead port 2/2 on $mux $procmux$1093.
    dead port 2/2 on $mux $procmux$963.
    dead port 2/2 on $mux $procmux$1021.
    dead port 2/2 on $mux $procmux$971.
    dead port 2/2 on $mux $procmux$1003.
    dead port 2/2 on $mux $procmux$979.
    dead port 2/2 on $mux $procmux$985.
    dead port 2/2 on $mux $procmux$991.
    dead port 2/2 on $mux $procmux$1009.
    dead port 2/2 on $mux $procmux$997.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 32/33 on $pmux $procmux$169.
    dead port 32/33 on $pmux $procmux$202.
Removed 23 multiplexer ports.
<suppressed ~74 debug messages>

11.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
    New ctrl vector for $pmux cell $procmux$1260: { $procmux$1267_CMP $procmux$1266_CMP $procmux$1206_CMP $procmux$1204_CMP $procmux$1203_CMP $procmux$1207_CMP $procmux$1205_CMP }
    New ctrl vector for $pmux cell $procmux$1279: $procmux$1207_CMP
    New ctrl vector for $pmux cell $procmux$1293: $procmux$1207_CMP
    New ctrl vector for $pmux cell $procmux$1308: { $procmux$1317_CMP $procmux$1316_CMP $procmux$1315_CMP $procmux$1314_CMP $procmux$1313_CMP $procmux$1312_CMP $procmux$1311_CMP $procmux$1310_CMP $procmux$1309_CMP }
    New ctrl vector for $pmux cell $procmux$1322: { $procmux$1328_CMP $procmux$1210_CMP $auto$opt_reduce.cc:134:opt_pmux$2347 }
    New ctrl vector for $pmux cell $procmux$1333: $procmux$1283_CMP
    New ctrl vector for $pmux cell $procmux$1344: { $procmux$1327_CMP $auto$opt_reduce.cc:134:opt_pmux$2349 }
    New ctrl vector for $pmux cell $procmux$1355: $auto$opt_reduce.cc:134:opt_pmux$2351
    New ctrl vector for $pmux cell $procmux$1366: $procmux$1324_CMP
    New ctrl vector for $pmux cell $procmux$1377: { $procmux$1297_CMP $procmux$1325_CMP $auto$opt_reduce.cc:134:opt_pmux$2353 }
    New ctrl vector for $pmux cell $procmux$1388: $auto$opt_reduce.cc:134:opt_pmux$2355
    New ctrl vector for $pmux cell $procmux$1399: $procmux$1283_CMP
    New ctrl vector for $pmux cell $procmux$1202: { $procmux$1206_CMP $procmux$1205_CMP $procmux$1204_CMP $procmux$1203_CMP }
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
    Consolidated identical input bits for $mux cell $procmux$1077:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$1077_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1077_Y [0]
      New connections: $procmux$1077_Y [7:1] = { $procmux$1077_Y [0] $procmux$1077_Y [0] $procmux$1077_Y [0] $procmux$1077_Y [0] $procmux$1077_Y [0] $procmux$1077_Y [0] $procmux$1077_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$1019:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$1019_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1019_Y [0]
      New connections: $procmux$1019_Y [7:1] = { $procmux$1019_Y [0] $procmux$1019_Y [0] $procmux$1019_Y [0] $procmux$1019_Y [0] $procmux$1019_Y [0] $procmux$1019_Y [0] $procmux$1019_Y [0] }
    New ctrl vector for $pmux cell $procmux$1178: { $procmux$1057_CMP [0] $procmux$1002_CMP $procmux$1180_CMP $procmux$1057_CMP [1] }
    Consolidated identical input bits for $mux cell $procmux$961:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$961_Y
      New ports: A=1'0, B=1'1, Y=$procmux$961_Y [0]
      New connections: $procmux$961_Y [7:1] = { $procmux$961_Y [0] $procmux$961_Y [0] $procmux$961_Y [0] $procmux$961_Y [0] $procmux$961_Y [0] $procmux$961_Y [0] $procmux$961_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$1001:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$1001_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1001_Y [0]
      New connections: $procmux$1001_Y [7:1] = { $procmux$1001_Y [0] $procmux$1001_Y [0] $procmux$1001_Y [0] $procmux$1001_Y [0] $procmux$1001_Y [0] $procmux$1001_Y [0] $procmux$1001_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$1056:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$1056_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1056_Y [0]
      New connections: $procmux$1056_Y [7:1] = { $procmux$1056_Y [0] $procmux$1056_Y [0] $procmux$1056_Y [0] $procmux$1056_Y [0] $procmux$1056_Y [0] $procmux$1056_Y [0] $procmux$1056_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$983:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$983_Y
      New ports: A=1'0, B=1'1, Y=$procmux$983_Y [0]
      New connections: $procmux$983_Y [7:1] = { $procmux$983_Y [0] $procmux$983_Y [0] $procmux$983_Y [0] $procmux$983_Y [0] $procmux$983_Y [0] $procmux$983_Y [0] $procmux$983_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$1037:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$1037_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1037_Y [0]
      New connections: $procmux$1037_Y [7:1] = { $procmux$1037_Y [0] $procmux$1037_Y [0] $procmux$1037_Y [0] $procmux$1037_Y [0] $procmux$1037_Y [0] $procmux$1037_Y [0] $procmux$1037_Y [0] }
  Optimizing cells in module \Data_memory.
    Consolidated identical input bits for $mux cell $procmux$1109:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$126, Y=$0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80
      New ports: A=1'0, B=$procmux$983_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] $0$memwr$\mem_cell$Data_memory.v:0$34_EN[7:0]$80 [0] }
    Consolidated identical input bits for $mux cell $procmux$1118:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$123, Y=$0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77
      New ports: A=1'0, B=$procmux$1001_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] $0$memwr$\mem_cell$Data_memory.v:0$33_EN[7:0]$77 [0] }
    Consolidated identical input bits for $mux cell $procmux$1127:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$120, Y=$0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74
      New ports: A=1'0, B=$procmux$1019_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] $0$memwr$\mem_cell$Data_memory.v:0$32_EN[7:0]$74 [0] }
    Consolidated identical input bits for $mux cell $procmux$1136:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$117, Y=$0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71
      New ports: A=1'0, B=$procmux$1037_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] $0$memwr$\mem_cell$Data_memory.v:0$31_EN[7:0]$71 [0] }
    Consolidated identical input bits for $mux cell $procmux$1145:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$114, Y=$0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68
      New ports: A=1'0, B=$procmux$1056_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] $0$memwr$\mem_cell$Data_memory.v:0$30_EN[7:0]$68 [0] }
    Consolidated identical input bits for $mux cell $procmux$1154:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$111, Y=$0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65
      New ports: A=1'0, B=$procmux$1077_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] $0$memwr$\mem_cell$Data_memory.v:0$29_EN[7:0]$65 [0] }
    Consolidated identical input bits for $mux cell $procmux$1163:
      Old ports: A=8'00000000, B=$2$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$108, Y=$0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62
      New ports: A=1'0, B=$procmux$961_Y [0], Y=$0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0]
      New connections: $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [7:1] = { $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] $0$memwr$\mem_cell$Data_memory.v:35$28_EN[7:0]$62 [0] }
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
    New ctrl vector for $pmux cell $procmux$951: { $procmux$926_CMP $procmux$925_CMP $procmux$947_CTRL $procmux$946_CMP }
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
    New ctrl vector for $pmux cell $procmux$898: { $procmux$900_CMP $procmux$899_CMP }
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 34 changes.

11.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
<suppressed ~6 debug messages>
Finding identical cells in module `\Control_unit'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Data_memory'.
<suppressed ~24 debug messages>
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 11 cells.

11.6.6. Executing OPT_DFF pass (perform DFF optimizations).

11.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 5 unused cells and 328 unused wires.
<suppressed ~11 debug messages>

11.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
<suppressed ~1 debug messages>
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.6.9. Rerunning OPT passes. (Maybe there is more to do..)

11.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

11.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
    New ctrl vector for $pmux cell $procmux$1410: { $procmux$1423_CMP $procmux$1422_CMP $procmux$1421_CMP $procmux$1420_CMP $procmux$1419_CMP $procmux$1418_CMP $procmux$1417_CMP $procmux$1416_CMP $auto$opt_reduce.cc:134:opt_pmux$2359 $procmux$1412_CMP $auto$opt_reduce.cc:134:opt_pmux$2357 }
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 1 changes.

11.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.6.13. Executing OPT_DFF pass (perform DFF optimizations).

11.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

11.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.6.16. Rerunning OPT passes. (Maybe there is more to do..)

11.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

11.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.6.20. Executing OPT_DFF pass (perform DFF optimizations).

11.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.6.23. Finished OPT passes. (There is nothing left to do.)

11.7. Executing FSM pass (extract and optimize FSM).

11.7.1. Executing FSM_DETECT pass (finding FSMs in design).

11.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

11.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

11.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

11.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

11.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

11.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11.8. Executing OPT pass (performing simple optimizations).

11.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

11.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$2312 ($adff) from module Registers (D = \wd, Q = \reg_cell[31]).
Adding EN signal on $procdff$2311 ($adff) from module Registers (D = \wd, Q = \reg_cell[30]).
Adding EN signal on $procdff$2310 ($adff) from module Registers (D = \wd, Q = \reg_cell[29]).
Adding EN signal on $procdff$2309 ($adff) from module Registers (D = \wd, Q = \reg_cell[28]).
Adding EN signal on $procdff$2308 ($adff) from module Registers (D = \wd, Q = \reg_cell[27]).
Adding EN signal on $procdff$2307 ($adff) from module Registers (D = \wd, Q = \reg_cell[26]).
Adding EN signal on $procdff$2306 ($adff) from module Registers (D = \wd, Q = \reg_cell[25]).
Adding EN signal on $procdff$2305 ($adff) from module Registers (D = \wd, Q = \reg_cell[24]).
Adding EN signal on $procdff$2304 ($adff) from module Registers (D = \wd, Q = \reg_cell[23]).
Adding EN signal on $procdff$2303 ($adff) from module Registers (D = \wd, Q = \reg_cell[22]).
Adding EN signal on $procdff$2302 ($adff) from module Registers (D = \wd, Q = \reg_cell[21]).
Adding EN signal on $procdff$2301 ($adff) from module Registers (D = \wd, Q = \reg_cell[20]).
Adding EN signal on $procdff$2300 ($adff) from module Registers (D = \wd, Q = \reg_cell[19]).
Adding EN signal on $procdff$2299 ($adff) from module Registers (D = \wd, Q = \reg_cell[18]).
Adding EN signal on $procdff$2298 ($adff) from module Registers (D = \wd, Q = \reg_cell[17]).
Adding EN signal on $procdff$2297 ($adff) from module Registers (D = \wd, Q = \reg_cell[16]).
Adding EN signal on $procdff$2296 ($adff) from module Registers (D = \wd, Q = \reg_cell[15]).
Adding EN signal on $procdff$2295 ($adff) from module Registers (D = \wd, Q = \reg_cell[14]).
Adding EN signal on $procdff$2294 ($adff) from module Registers (D = \wd, Q = \reg_cell[13]).
Adding EN signal on $procdff$2293 ($adff) from module Registers (D = \wd, Q = \reg_cell[12]).
Adding EN signal on $procdff$2292 ($adff) from module Registers (D = \wd, Q = \reg_cell[11]).
Adding EN signal on $procdff$2291 ($adff) from module Registers (D = \wd, Q = \reg_cell[10]).
Adding EN signal on $procdff$2290 ($adff) from module Registers (D = \wd, Q = \reg_cell[9]).
Adding EN signal on $procdff$2289 ($adff) from module Registers (D = \wd, Q = \reg_cell[8]).
Adding EN signal on $procdff$2288 ($adff) from module Registers (D = \wd, Q = \reg_cell[7]).
Adding EN signal on $procdff$2287 ($adff) from module Registers (D = \wd, Q = \reg_cell[6]).
Adding EN signal on $procdff$2286 ($adff) from module Registers (D = \wd, Q = \reg_cell[5]).
Adding EN signal on $procdff$2285 ($adff) from module Registers (D = \wd, Q = \reg_cell[4]).
Adding EN signal on $procdff$2284 ($adff) from module Registers (D = \wd, Q = \reg_cell[3]).
Adding EN signal on $procdff$2283 ($adff) from module Registers (D = \wd, Q = \reg_cell[2]).
Adding EN signal on $procdff$2282 ($adff) from module Registers (D = \wd, Q = \reg_cell[1]).

11.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 62 unused cells and 62 unused wires.
<suppressed ~63 debug messages>

11.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.8.9. Rerunning OPT passes. (Maybe there is more to do..)

11.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

11.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.8.13. Executing OPT_DFF pass (perform DFF optimizations).

11.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.8.16. Finished OPT passes. (There is nothing left to do.)

11.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell ALU.$ternary$ALU.v:38$11 ($mux).
Removed top 31 bits (of 32) from mux cell ALU.$ternary$ALU.v:40$15 ($mux).
Removed top 31 bits (of 32) from mux cell ALU.$ternary$ALU.v:41$17 ($mux).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$1416_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$1417_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$1418_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$1419_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$1420_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$1421_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell ALU.$procmux$1422_CMP0 ($eq).
Removed top 31 bits (of 32) from wire ALU.$ternary$ALU.v:38$11_Y.
Removed top 31 bits (of 32) from wire ALU.$ternary$ALU.v:40$15_Y.
Removed top 31 bits (of 32) from wire ALU.$ternary$ALU.v:41$17_Y.
Removed top 1 bits (of 7) from port B of cell Control_unit.$eq$Control_unit.v:146$23 ($eq).
Removed top 1 bits (of 4) from mux cell Control_unit.$procmux$1202 ($pmux).
Removed top 2 bits (of 3) from port B of cell Control_unit.$procmux$1207_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Control_unit.$procmux$1266_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Control_unit.$procmux$1267_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell Control_unit.$procmux$1279 ($mux).
Removed top 1 bits (of 7) from port B of cell Control_unit.$procmux$1283_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell Control_unit.$procmux$1297_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell Control_unit.$procmux$1309_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell Control_unit.$procmux$1310_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell Control_unit.$procmux$1311_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell Control_unit.$procmux$1312_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell Control_unit.$procmux$1313_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell Control_unit.$procmux$1314_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell Control_unit.$procmux$1315_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell Control_unit.$procmux$1316_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell Control_unit.$procmux$1317_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Control_unit.$procmux$1320_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Control_unit.$procmux$1324_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Control_unit.$procmux$1325_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Control_unit.$procmux$1328_CMP0 ($eq).
Removed top 2 bits (of 3) from FF cell Control_unit.$auto$proc_dlatch.cc:427:proc_dlatch$2277 ($dlatch).
Removed top 2 bits (of 3) from wire Control_unit.$0\memRWSize[2:0].
Removed top 1 bits (of 4) from wire Control_unit.$7\ALUop[3:0].
Removed top 2 address bits (of 12) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2339 (mem_cell).
Removed top 22 address bits (of 32) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2340 (mem_cell).
Removed top 2 address bits (of 12) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2341 (mem_cell).
Removed top 22 address bits (of 32) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2342 (mem_cell).
Removed top 22 address bits (of 32) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2343 (mem_cell).
Removed top 22 address bits (of 32) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2344 (mem_cell).
Removed top 2 address bits (of 12) from memory init port Data_memory.$auto$proc_memwr.cc:45:proc_memwr$2345 (mem_cell).
Removed top 2 address bits (of 12) from memory read port Data_memory.$memrd$\mem_cell$Data_memory.v:26$40 (mem_cell).
Removed top 22 address bits (of 32) from memory read port Data_memory.$memrd$\mem_cell$Data_memory.v:27$43 (mem_cell).
Removed top 22 address bits (of 32) from memory read port Data_memory.$memrd$\mem_cell$Data_memory.v:28$46 (mem_cell).
Removed top 22 address bits (of 32) from memory read port Data_memory.$memrd$\mem_cell$Data_memory.v:28$48 (mem_cell).
Removed top 31 bits (of 32) from port B of cell Data_memory.$add$Data_memory.v:27$44 ($add).
Removed top 19 bits (of 32) from port Y of cell Data_memory.$add$Data_memory.v:27$44 ($add).
Removed top 30 bits (of 32) from port B of cell Data_memory.$add$Data_memory.v:28$47 ($add).
Removed top 19 bits (of 32) from port Y of cell Data_memory.$add$Data_memory.v:28$47 ($add).
Removed top 30 bits (of 32) from port B of cell Data_memory.$add$Data_memory.v:28$49 ($add).
Removed top 19 bits (of 32) from port Y of cell Data_memory.$add$Data_memory.v:28$49 ($add).
Removed top 1 bits (of 3) from port B of cell Data_memory.$procmux$1002_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Data_memory.$procmux$1057_CMP0 ($eq).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$1115 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1124 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1133 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1142 ($mux).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$1151 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1160 ($mux).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$1169 ($mux).
Removed top 1 bits (of 3) from port B of cell Data_memory.$procmux$1180_CMP0 ($eq).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$977 ($mux).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$995 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1013 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1031 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1049 ($mux).
Removed top 2 bits (of 12) from mux cell Data_memory.$procmux$1070 ($mux).
Removed top 22 bits (of 32) from mux cell Data_memory.$procmux$1091 ($mux).
Removed top 3 bits (of 13) from port Y of cell Data_memory.$add$Data_memory.v:27$44 ($add).
Removed top 2 bits (of 12) from port A of cell Data_memory.$add$Data_memory.v:27$44 ($add).
Removed top 3 bits (of 13) from port Y of cell Data_memory.$add$Data_memory.v:28$47 ($add).
Removed top 2 bits (of 12) from port A of cell Data_memory.$add$Data_memory.v:28$47 ($add).
Removed top 3 bits (of 13) from port Y of cell Data_memory.$add$Data_memory.v:28$49 ($add).
Removed top 2 bits (of 12) from port A of cell Data_memory.$add$Data_memory.v:28$49 ($add).
Removed top 22 bits (of 32) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$29_ADDR[31:0]$63.
Removed top 2 bits (of 12) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$30_ADDR[11:0]$66.
Removed top 22 bits (of 32) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$31_ADDR[31:0]$69.
Removed top 22 bits (of 32) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$32_ADDR[31:0]$72.
Removed top 22 bits (of 32) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$33_ADDR[31:0]$75.
Removed top 2 bits (of 12) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:0$34_ADDR[11:0]$78.
Removed top 2 bits (of 12) from wire Data_memory.$0$memwr$\mem_cell$Data_memory.v:35$28_ADDR[11:0]$60.
Removed top 22 bits (of 32) from wire Data_memory.$2$memwr$\mem_cell$Data_memory.v:0$29_ADDR[31:0]$109.
Removed top 2 bits (of 12) from wire Data_memory.$2$memwr$\mem_cell$Data_memory.v:0$30_ADDR[11:0]$112.
Removed top 22 bits (of 32) from wire Data_memory.$2$memwr$\mem_cell$Data_memory.v:0$31_ADDR[31:0]$115.
Removed top 22 bits (of 32) from wire Data_memory.$2$memwr$\mem_cell$Data_memory.v:0$32_ADDR[31:0]$118.
Removed top 2 bits (of 12) from wire Data_memory.$2$memwr$\mem_cell$Data_memory.v:35$28_ADDR[11:0]$106.
Removed top 22 bits (of 32) from wire Data_memory.$add$Data_memory.v:27$44_Y.
Removed top 22 bits (of 32) from wire Data_memory.$add$Data_memory.v:28$49_Y.
Removed top 1 bits (of 7) from port B of cell Instruction_decoder.$procmux$920_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Instruction_decoder.$procmux$926_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Instruction_decoder.$procmux$934_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell Instruction_decoder.$procmux$934_CMP1 ($eq).
Removed top 1 bits (of 7) from port B of cell Instruction_decoder.$procmux$947_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Instruction_decoder.$procmux$947_CMP1 ($eq).
Removed top 1 bits (of 32) from mux cell Instruction_decoder.$procmux$951 ($pmux).
Removed top 24 bits (of 32) from port A of cell Instruction_memory.$sub$Instruction_memory.v:11$133 ($sub).
Removed top 24 bits (of 32) from port B of cell Instruction_memory.$sub$Instruction_memory.v:11$133 ($sub).
Removed top 23 bits (of 32) from port Y of cell Instruction_memory.$sub$Instruction_memory.v:11$133 ($sub).
Removed top 18 bits (of 32) from port B of cell Instruction_memory.$shiftx$Instruction_memory.v:0$136 ($shiftx).
Removed top 5 bits (of 32) from wire Instruction_memory.$sub$Instruction_memory.v:11$133_Y.
Removed top 29 bits (of 32) from port B of cell Multiplexers.$add$Multiplexers.v:66$137 ($add).
Removed top 29 bits (of 32) from port B of cell Multiplexers.$add$Multiplexers.v:67$138 ($add).
Removed top 1 bits (of 2) from port B of cell Multiplexers.$procmux$900_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell Multiplexers.$procmux$911_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$186_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$187_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$188_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$189_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$190_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$191_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$192_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$193_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$194_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$195_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$196_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$197_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$198_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$199_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell Registers.$procmux$200_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$219_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$221_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$222_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$223_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$224_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$225_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$226_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$227_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$229_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$230_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$231_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$232_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell Registers.$procmux$233_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$459_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$481_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$504_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$528_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$553_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$579_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$606_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell Registers.$procmux$634_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$663_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$693_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$724_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell Registers.$procmux$756_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$789_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell Registers.$procmux$823_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell Registers.$procmux$858_CMP0 ($eq).

11.10. Executing PEEPOPT pass (run peephole optimizers).

11.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 0 unused cells and 21 unused wires.
<suppressed ~4 debug messages>

11.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU:
  creating $macc model for $add$ALU.v:30$2 ($add).
  creating $macc model for $sub$ALU.v:31$3 ($sub).
  creating $alu model for $macc $sub$ALU.v:31$3.
  creating $alu model for $macc $add$ALU.v:30$2.
  creating $alu model for $ge$ALU.v:40$14 ($ge): new $alu
  creating $alu model for $lt$ALU.v:38$10 ($lt): merged with $ge$ALU.v:40$14.
  creating $alu model for $eq$ALU.v:41$16 ($eq): merged with $ge$ALU.v:40$14.
  creating $alu cell for $ge$ALU.v:40$14, $lt$ALU.v:38$10, $eq$ALU.v:41$16: $auto$alumacc.cc:485:replace_alu$2474
  creating $alu cell for $add$ALU.v:30$2: $auto$alumacc.cc:485:replace_alu$2487
  creating $alu cell for $sub$ALU.v:31$3: $auto$alumacc.cc:485:replace_alu$2490
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Control_unit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Data_memory:
  creating $macc model for $add$Data_memory.v:27$44 ($add).
  creating $macc model for $add$Data_memory.v:28$47 ($add).
  creating $macc model for $add$Data_memory.v:28$49 ($add).
  creating $alu model for $macc $add$Data_memory.v:28$49.
  creating $alu model for $macc $add$Data_memory.v:28$47.
  creating $alu model for $macc $add$Data_memory.v:27$44.
  creating $alu cell for $add$Data_memory.v:27$44: $auto$alumacc.cc:485:replace_alu$2493
  creating $alu cell for $add$Data_memory.v:28$47: $auto$alumacc.cc:485:replace_alu$2496
  creating $alu cell for $add$Data_memory.v:28$49: $auto$alumacc.cc:485:replace_alu$2499
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Instruction_decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Instruction_memory:
  creating $macc model for $sub$Instruction_memory.v:11$133 ($sub).
  creating $alu model for $macc $sub$Instruction_memory.v:11$133.
  creating $alu cell for $sub$Instruction_memory.v:11$133: $auto$alumacc.cc:485:replace_alu$2502
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Multiplexers:
  creating $macc model for $add$Multiplexers.v:66$137 ($add).
  creating $macc model for $add$Multiplexers.v:67$138 ($add).
  creating $macc model for $add$Multiplexers.v:68$139 ($add).
  creating $macc model for $add$Multiplexers.v:69$140 ($add).
  creating $alu model for $macc $add$Multiplexers.v:69$140.
  creating $alu model for $macc $add$Multiplexers.v:68$139.
  creating $alu model for $macc $add$Multiplexers.v:67$138.
  creating $alu model for $macc $add$Multiplexers.v:66$137.
  creating $alu cell for $add$Multiplexers.v:66$137: $auto$alumacc.cc:485:replace_alu$2505
  creating $alu cell for $add$Multiplexers.v:67$138: $auto$alumacc.cc:485:replace_alu$2508
  creating $alu cell for $add$Multiplexers.v:68$139: $auto$alumacc.cc:485:replace_alu$2511
  creating $alu cell for $add$Multiplexers.v:69$140: $auto$alumacc.cc:485:replace_alu$2514
  created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Program_Counter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module RISC_V:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Registers:
  created 0 $alu and 0 $macc cells.

11.13. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module ALU that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$ALU.v:34$6 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$1419_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$ALU.v:33$5 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$1420_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$ALU.v:32$4 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$1421_CMP.
    No candidates found.
Found 4 cells in module Data_memory that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\mem_cell$Data_memory.v:28$48 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$1002_CMP.
    Found 3 candidates: $memrd$\mem_cell$Data_memory.v:28$46 $memrd$\mem_cell$Data_memory.v:27$43 $memrd$\mem_cell$Data_memory.v:26$40
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:28$46 ($memrd):
      Found 1 activation_patterns using ctrl signal $procmux$1002_CMP.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$48: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$46: $procmux$1002_CMP = 1'1
      Size of SAT problem: 0 cells, 18 variables, 41 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $procmux$1002_CMP = 1'1
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:27$43 ($memrd):
      Found 3 activation_patterns using ctrl signal { $procmux$1057_CMP $procmux$1002_CMP }.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$48: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [0] = 1'1
      Size of SAT problem: 0 cells, 40 variables, 107 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1057_CMP $procmux$1002_CMP } = 3'001
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:26$40 ($memrd):
      Found 5 activation_patterns using ctrl signal { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP }.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$48: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0000
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1180_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [0] = 1'1
      Size of SAT problem: 0 cells, 56 variables, 158 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0001
  Analyzing resource sharing options for $memrd$\mem_cell$Data_memory.v:28$46 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$1002_CMP.
    Found 2 candidates: $memrd$\mem_cell$Data_memory.v:27$43 $memrd$\mem_cell$Data_memory.v:26$40
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:27$43 ($memrd):
      Found 3 activation_patterns using ctrl signal { $procmux$1057_CMP $procmux$1002_CMP }.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$46: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [0] = 1'1
      Size of SAT problem: 0 cells, 40 variables, 107 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1057_CMP $procmux$1002_CMP } = 3'001
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:26$40 ($memrd):
      Found 5 activation_patterns using ctrl signal { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP }.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:28$46: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0000
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1180_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [0] = 1'1
      Size of SAT problem: 0 cells, 56 variables, 158 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0001
  Analyzing resource sharing options for $memrd$\mem_cell$Data_memory.v:27$43 ($memrd):
    Found 3 activation_patterns using ctrl signal { $procmux$1057_CMP $procmux$1002_CMP }.
    Found 1 candidates: $memrd$\mem_cell$Data_memory.v:26$40
    Analyzing resource sharing with $memrd$\mem_cell$Data_memory.v:26$40 ($memrd):
      Found 5 activation_patterns using ctrl signal { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP }.
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:27$43: $procmux$1057_CMP [0] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0000
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [1] = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1180_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1002_CMP = 1'1
      Activation pattern for cell $memrd$\mem_cell$Data_memory.v:26$40: $procmux$1057_CMP [0] = 1'1
      Size of SAT problem: 0 cells, 63 variables, 181 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP } = 4'0001
  Analyzing resource sharing options for $memrd$\mem_cell$Data_memory.v:26$40 ($memrd):
    Found 5 activation_patterns using ctrl signal { $procmux$1180_CMP $procmux$1057_CMP $procmux$1002_CMP }.
    No candidates found.

11.14. Executing OPT pass (performing simple optimizations).

11.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

11.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.14.6. Executing OPT_DFF pass (perform DFF optimizations).

11.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

11.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.14.9. Rerunning OPT passes. (Maybe there is more to do..)

11.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

11.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.14.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.14.16. Finished OPT passes. (There is nothing left to do.)

11.15. Executing MEMORY pass.

11.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

11.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 7 transformations.

11.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing Data_memory.mem_cell write port 0.
  Analyzing Data_memory.mem_cell write port 1.
  Analyzing Data_memory.mem_cell write port 2.
  Analyzing Data_memory.mem_cell write port 3.
  Analyzing Data_memory.mem_cell write port 4.
  Analyzing Data_memory.mem_cell write port 5.
  Analyzing Data_memory.mem_cell write port 6.

11.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

11.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\mem_cell'[0] in module `\Data_memory': no output FF found.
Checking read port `\mem_cell'[1] in module `\Data_memory': no output FF found.
Checking read port `\mem_cell'[2] in module `\Data_memory': no output FF found.
Checking read port `\mem_cell'[3] in module `\Data_memory': no output FF found.
Checking read port address `\mem_cell'[0] in module `\Data_memory': no address FF found.
Checking read port address `\mem_cell'[1] in module `\Data_memory': no address FF found.
Checking read port address `\mem_cell'[2] in module `\Data_memory': no address FF found.
Checking read port address `\mem_cell'[3] in module `\Data_memory': no address FF found.

11.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory Data_memory.mem_cell by address:
Consolidating write ports of memory Data_memory.mem_cell by address:
  Merging ports 0, 2 (address \mem_addr [9:0]).
  Merging ports 0, 6 (address \mem_addr [9:0]).
  Merging ports 1, 5 (address $add$Data_memory.v:27$44_Y).
Consolidating write ports of memory Data_memory.mem_cell by address:
Consolidating write ports of memory Data_memory.mem_cell using sat-based resource sharing:
  Checking group clocked with posedge \clk, width 8: ports 0, 1, 2, 3.
  Common input cone for all EN signals: 16 cells.
  Size of unconstrained SAT problem: 105 variables, 272 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 0 with port 2 is not possible.
  According to SAT solver sharing of port 0 with port 3 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 1 with port 3 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.

11.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

11.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 10 unused cells and 10 unused wires.
<suppressed ~11 debug messages>

11.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

11.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.17. Executing OPT pass (performing simple optimizations).

11.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~3 debug messages>
Optimizing module Control_unit.
<suppressed ~5 debug messages>
Optimizing module Data_memory.
<suppressed ~25 debug messages>
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
<suppressed ~4 debug messages>
Optimizing module Multiplexers.
<suppressed ~5 debug messages>
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.
<suppressed ~2 debug messages>

11.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.17.3. Executing OPT_DFF pass (perform DFF optimizations).

11.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 5 unused cells and 43 unused wires.
<suppressed ~11 debug messages>

11.17.5. Finished fast OPT passes.

11.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \mem_cell in module \Data_memory:
  created 1024 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 4092 $mux cells.
  write interface: 4096 write mux blocks.

11.19. Executing OPT pass (performing simple optimizations).

11.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
<suppressed ~78 debug messages>
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1038 debug messages>

11.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
    Consolidated identical input bits for $mux cell $procmux$1218:
      Old ports: A=4'1111, B=4'0100, Y=$6\ALUop[3:0]
      New ports: A=1'1, B=1'0, Y=$6\ALUop[3:0] [0]
      New connections: $6\ALUop[3:0] [3:1] = { $6\ALUop[3:0] [0] 1'1 $6\ALUop[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$1248:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUop[3:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUop[3:0] [0]
      New connections: $4\ALUop[3:0] [3:1] = { $4\ALUop[3:0] [0] $4\ALUop[3:0] [0] 1'1 }
  Optimizing cells in module \Control_unit.
    Consolidated identical input bits for $mux cell $procmux$1234:
      Old ports: A=$6\ALUop[3:0], B=4'0011, Y=$5\ALUop[3:0]
      New ports: A={ $6\ALUop[3:0] [0] 1'1 $6\ALUop[3:0] [0] }, B=3'001, Y={ $5\ALUop[3:0] [3:2] $5\ALUop[3:0] [0] }
      New connections: $5\ALUop[3:0] [1] = $5\ALUop[3:0] [0]
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 3 changes.

11.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
<suppressed ~1536 debug messages>
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 512 cells.

11.19.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$1410 in front of them:
        $auto$alumacc.cc:485:replace_alu$2490
        $auto$alumacc.cc:485:replace_alu$2487

    Found cells that share an operand and can be merged by moving the $pmux $procmux$898 in front of them:
        $auto$alumacc.cc:485:replace_alu$2511
        $auto$alumacc.cc:485:replace_alu$2514

11.19.7. Executing OPT_DFF pass (perform DFF optimizations).

11.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 0 unused cells and 5683 unused wires.
<suppressed ~5 debug messages>

11.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module Control_unit.
<suppressed ~2 debug messages>
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
<suppressed ~1 debug messages>
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.19.10. Rerunning OPT passes. (Maybe there is more to do..)

11.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1552 debug messages>

11.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
    New ctrl vector for $pmux cell $procmux$1410: { $auto$opt_reduce.cc:134:opt_pmux$42392 $procmux$1421_CMP $procmux$1420_CMP $procmux$1419_CMP $procmux$1418_CMP $procmux$1417_CMP $procmux$1416_CMP $auto$opt_reduce.cc:134:opt_pmux$2359 $procmux$1412_CMP $auto$opt_reduce.cc:134:opt_pmux$2357 }
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
    New ctrl vector for $pmux cell $procmux$898: $auto$opt_reduce.cc:134:opt_pmux$42394
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 2 changes.

11.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.19.14. Executing OPT_SHARE pass.

11.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\mem_cell[9]$2573 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[9][3][0]$y$17410, Q = \mem_cell[9]).
Adding EN signal on $memory\mem_cell[99]$2753 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[99][3][0]$y$19874, Q = \mem_cell[99]).
Adding EN signal on $memory\mem_cell[999]$4553 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[999][3][0]$y$41802, Q = \mem_cell[999]).
Adding EN signal on $memory\mem_cell[998]$4551 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[998][3][0]$y$41778, Q = \mem_cell[998]).
Adding EN signal on $memory\mem_cell[997]$4549 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[997][3][0]$y$41754, Q = \mem_cell[997]).
Adding EN signal on $memory\mem_cell[996]$4547 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[996][3][0]$y$41730, Q = \mem_cell[996]).
Adding EN signal on $memory\mem_cell[995]$4545 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[995][3][0]$y$41706, Q = \mem_cell[995]).
Adding EN signal on $memory\mem_cell[994]$4543 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[994][3][0]$y$41682, Q = \mem_cell[994]).
Adding EN signal on $memory\mem_cell[993]$4541 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[993][3][0]$y$41658, Q = \mem_cell[993]).
Adding EN signal on $memory\mem_cell[992]$4539 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[992][3][0]$y$41634, Q = \mem_cell[992]).
Adding EN signal on $memory\mem_cell[991]$4537 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[991][3][0]$y$41602, Q = \mem_cell[991]).
Adding EN signal on $memory\mem_cell[990]$4535 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[990][3][0]$y$41578, Q = \mem_cell[990]).
Adding EN signal on $memory\mem_cell[98]$2751 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[98][3][0]$y$19850, Q = \mem_cell[98]).
Adding EN signal on $memory\mem_cell[989]$4533 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[989][3][0]$y$41554, Q = \mem_cell[989]).
Adding EN signal on $memory\mem_cell[988]$4531 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[988][3][0]$y$41530, Q = \mem_cell[988]).
Adding EN signal on $memory\mem_cell[987]$4529 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[987][3][0]$y$41506, Q = \mem_cell[987]).
Adding EN signal on $memory\mem_cell[986]$4527 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[986][3][0]$y$41482, Q = \mem_cell[986]).
Adding EN signal on $memory\mem_cell[985]$4525 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[985][3][0]$y$41458, Q = \mem_cell[985]).
Adding EN signal on $memory\mem_cell[984]$4523 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[984][3][0]$y$41434, Q = \mem_cell[984]).
Adding EN signal on $memory\mem_cell[983]$4521 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[983][3][0]$y$41410, Q = \mem_cell[983]).
Adding EN signal on $memory\mem_cell[982]$4519 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[982][3][0]$y$41386, Q = \mem_cell[982]).
Adding EN signal on $memory\mem_cell[981]$4517 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[981][3][0]$y$41362, Q = \mem_cell[981]).
Adding EN signal on $memory\mem_cell[980]$4515 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[980][3][0]$y$41338, Q = \mem_cell[980]).
Adding EN signal on $memory\mem_cell[97]$2749 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[97][3][0]$y$19826, Q = \mem_cell[97]).
Adding EN signal on $memory\mem_cell[979]$4513 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[979][3][0]$y$41314, Q = \mem_cell[979]).
Adding EN signal on $memory\mem_cell[978]$4511 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[978][3][0]$y$41290, Q = \mem_cell[978]).
Adding EN signal on $memory\mem_cell[977]$4509 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[977][3][0]$y$41266, Q = \mem_cell[977]).
Adding EN signal on $memory\mem_cell[976]$4507 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[976][3][0]$y$41242, Q = \mem_cell[976]).
Adding EN signal on $memory\mem_cell[975]$4505 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[975][3][0]$y$41218, Q = \mem_cell[975]).
Adding EN signal on $memory\mem_cell[974]$4503 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[974][3][0]$y$41194, Q = \mem_cell[974]).
Adding EN signal on $memory\mem_cell[973]$4501 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[973][3][0]$y$41170, Q = \mem_cell[973]).
Adding EN signal on $memory\mem_cell[972]$4499 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[972][3][0]$y$41146, Q = \mem_cell[972]).
Adding EN signal on $memory\mem_cell[971]$4497 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[971][3][0]$y$41122, Q = \mem_cell[971]).
Adding EN signal on $memory\mem_cell[970]$4495 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[970][3][0]$y$41098, Q = \mem_cell[970]).
Adding EN signal on $memory\mem_cell[96]$2747 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[96][3][0]$y$19802, Q = \mem_cell[96]).
Adding EN signal on $memory\mem_cell[969]$4493 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[969][3][0]$y$41074, Q = \mem_cell[969]).
Adding EN signal on $memory\mem_cell[968]$4491 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[968][3][0]$y$41050, Q = \mem_cell[968]).
Adding EN signal on $memory\mem_cell[967]$4489 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[967][3][0]$y$41026, Q = \mem_cell[967]).
Adding EN signal on $memory\mem_cell[966]$4487 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[966][3][0]$y$41002, Q = \mem_cell[966]).
Adding EN signal on $memory\mem_cell[965]$4485 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[965][3][0]$y$40978, Q = \mem_cell[965]).
Adding EN signal on $memory\mem_cell[964]$4483 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[964][3][0]$y$40954, Q = \mem_cell[964]).
Adding EN signal on $memory\mem_cell[963]$4481 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[963][3][0]$y$40930, Q = \mem_cell[963]).
Adding EN signal on $memory\mem_cell[962]$4479 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[962][3][0]$y$40906, Q = \mem_cell[962]).
Adding EN signal on $memory\mem_cell[961]$4477 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[961][3][0]$y$40882, Q = \mem_cell[961]).
Adding EN signal on $memory\mem_cell[960]$4475 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[960][3][0]$y$40858, Q = \mem_cell[960]).
Adding EN signal on $memory\mem_cell[95]$2745 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[95][3][0]$y$19762, Q = \mem_cell[95]).
Adding EN signal on $memory\mem_cell[959]$4473 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[959][3][0]$y$40826, Q = \mem_cell[959]).
Adding EN signal on $memory\mem_cell[958]$4471 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[958][3][0]$y$40802, Q = \mem_cell[958]).
Adding EN signal on $memory\mem_cell[957]$4469 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[957][3][0]$y$40778, Q = \mem_cell[957]).
Adding EN signal on $memory\mem_cell[956]$4467 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[956][3][0]$y$40754, Q = \mem_cell[956]).
Adding EN signal on $memory\mem_cell[955]$4465 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[955][3][0]$y$40730, Q = \mem_cell[955]).
Adding EN signal on $memory\mem_cell[954]$4463 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[954][3][0]$y$40706, Q = \mem_cell[954]).
Adding EN signal on $memory\mem_cell[953]$4461 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[953][3][0]$y$40682, Q = \mem_cell[953]).
Adding EN signal on $memory\mem_cell[952]$4459 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[952][3][0]$y$40658, Q = \mem_cell[952]).
Adding EN signal on $memory\mem_cell[951]$4457 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[951][3][0]$y$40634, Q = \mem_cell[951]).
Adding EN signal on $memory\mem_cell[950]$4455 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[950][3][0]$y$40610, Q = \mem_cell[950]).
Adding EN signal on $memory\mem_cell[94]$2743 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[94][3][0]$y$19738, Q = \mem_cell[94]).
Adding EN signal on $memory\mem_cell[949]$4453 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[949][3][0]$y$40586, Q = \mem_cell[949]).
Adding EN signal on $memory\mem_cell[948]$4451 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[948][3][0]$y$40562, Q = \mem_cell[948]).
Adding EN signal on $memory\mem_cell[947]$4449 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[947][3][0]$y$40538, Q = \mem_cell[947]).
Adding EN signal on $memory\mem_cell[946]$4447 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[946][3][0]$y$40514, Q = \mem_cell[946]).
Adding EN signal on $memory\mem_cell[945]$4445 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[945][3][0]$y$40490, Q = \mem_cell[945]).
Adding EN signal on $memory\mem_cell[944]$4443 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[944][3][0]$y$40466, Q = \mem_cell[944]).
Adding EN signal on $memory\mem_cell[943]$4441 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[943][3][0]$y$40442, Q = \mem_cell[943]).
Adding EN signal on $memory\mem_cell[942]$4439 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[942][3][0]$y$40418, Q = \mem_cell[942]).
Adding EN signal on $memory\mem_cell[941]$4437 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[941][3][0]$y$40394, Q = \mem_cell[941]).
Adding EN signal on $memory\mem_cell[940]$4435 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[940][3][0]$y$40370, Q = \mem_cell[940]).
Adding EN signal on $memory\mem_cell[93]$2741 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[93][3][0]$y$19714, Q = \mem_cell[93]).
Adding EN signal on $memory\mem_cell[939]$4433 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[939][3][0]$y$40346, Q = \mem_cell[939]).
Adding EN signal on $memory\mem_cell[938]$4431 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[938][3][0]$y$40322, Q = \mem_cell[938]).
Adding EN signal on $memory\mem_cell[937]$4429 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[937][3][0]$y$40298, Q = \mem_cell[937]).
Adding EN signal on $memory\mem_cell[936]$4427 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[936][3][0]$y$40274, Q = \mem_cell[936]).
Adding EN signal on $memory\mem_cell[935]$4425 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[935][3][0]$y$40250, Q = \mem_cell[935]).
Adding EN signal on $memory\mem_cell[934]$4423 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[934][3][0]$y$40226, Q = \mem_cell[934]).
Adding EN signal on $memory\mem_cell[933]$4421 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[933][3][0]$y$40202, Q = \mem_cell[933]).
Adding EN signal on $memory\mem_cell[932]$4419 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[932][3][0]$y$40178, Q = \mem_cell[932]).
Adding EN signal on $memory\mem_cell[931]$4417 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[931][3][0]$y$40154, Q = \mem_cell[931]).
Adding EN signal on $memory\mem_cell[930]$4415 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[930][3][0]$y$40130, Q = \mem_cell[930]).
Adding EN signal on $memory\mem_cell[92]$2739 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[92][3][0]$y$19690, Q = \mem_cell[92]).
Adding EN signal on $memory\mem_cell[929]$4413 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[929][3][0]$y$40106, Q = \mem_cell[929]).
Adding EN signal on $memory\mem_cell[928]$4411 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[928][3][0]$y$40082, Q = \mem_cell[928]).
Adding EN signal on $memory\mem_cell[927]$4409 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[927][3][0]$y$40050, Q = \mem_cell[927]).
Adding EN signal on $memory\mem_cell[926]$4407 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[926][3][0]$y$40026, Q = \mem_cell[926]).
Adding EN signal on $memory\mem_cell[925]$4405 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[925][3][0]$y$40002, Q = \mem_cell[925]).
Adding EN signal on $memory\mem_cell[924]$4403 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[924][3][0]$y$39978, Q = \mem_cell[924]).
Adding EN signal on $memory\mem_cell[923]$4401 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[923][3][0]$y$39954, Q = \mem_cell[923]).
Adding EN signal on $memory\mem_cell[922]$4399 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[922][3][0]$y$39930, Q = \mem_cell[922]).
Adding EN signal on $memory\mem_cell[921]$4397 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[921][3][0]$y$39906, Q = \mem_cell[921]).
Adding EN signal on $memory\mem_cell[920]$4395 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[920][3][0]$y$39882, Q = \mem_cell[920]).
Adding EN signal on $memory\mem_cell[91]$2737 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[91][3][0]$y$19666, Q = \mem_cell[91]).
Adding EN signal on $memory\mem_cell[919]$4393 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[919][3][0]$y$39858, Q = \mem_cell[919]).
Adding EN signal on $memory\mem_cell[918]$4391 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[918][3][0]$y$39834, Q = \mem_cell[918]).
Adding EN signal on $memory\mem_cell[917]$4389 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[917][3][0]$y$39810, Q = \mem_cell[917]).
Adding EN signal on $memory\mem_cell[916]$4387 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[916][3][0]$y$39786, Q = \mem_cell[916]).
Adding EN signal on $memory\mem_cell[915]$4385 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[915][3][0]$y$39762, Q = \mem_cell[915]).
Adding EN signal on $memory\mem_cell[914]$4383 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[914][3][0]$y$39738, Q = \mem_cell[914]).
Adding EN signal on $memory\mem_cell[913]$4381 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[913][3][0]$y$39714, Q = \mem_cell[913]).
Adding EN signal on $memory\mem_cell[912]$4379 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[912][3][0]$y$39690, Q = \mem_cell[912]).
Adding EN signal on $memory\mem_cell[911]$4377 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[911][3][0]$y$39666, Q = \mem_cell[911]).
Adding EN signal on $memory\mem_cell[910]$4375 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[910][3][0]$y$39642, Q = \mem_cell[910]).
Adding EN signal on $memory\mem_cell[90]$2735 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[90][3][0]$y$19642, Q = \mem_cell[90]).
Adding EN signal on $memory\mem_cell[909]$4373 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[909][3][0]$y$39618, Q = \mem_cell[909]).
Adding EN signal on $memory\mem_cell[908]$4371 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[908][3][0]$y$39594, Q = \mem_cell[908]).
Adding EN signal on $memory\mem_cell[907]$4369 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[907][3][0]$y$39570, Q = \mem_cell[907]).
Adding EN signal on $memory\mem_cell[906]$4367 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[906][3][0]$y$39546, Q = \mem_cell[906]).
Adding EN signal on $memory\mem_cell[905]$4365 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[905][3][0]$y$39522, Q = \mem_cell[905]).
Adding EN signal on $memory\mem_cell[904]$4363 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[904][3][0]$y$39498, Q = \mem_cell[904]).
Adding EN signal on $memory\mem_cell[903]$4361 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[903][3][0]$y$39474, Q = \mem_cell[903]).
Adding EN signal on $memory\mem_cell[902]$4359 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[902][3][0]$y$39450, Q = \mem_cell[902]).
Adding EN signal on $memory\mem_cell[901]$4357 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[901][3][0]$y$39426, Q = \mem_cell[901]).
Adding EN signal on $memory\mem_cell[900]$4355 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[900][3][0]$y$39402, Q = \mem_cell[900]).
Adding EN signal on $memory\mem_cell[8]$2571 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[8][3][0]$y$17378, Q = \mem_cell[8]).
Adding EN signal on $memory\mem_cell[89]$2733 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[89][3][0]$y$19618, Q = \mem_cell[89]).
Adding EN signal on $memory\mem_cell[899]$4353 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[899][3][0]$y$39378, Q = \mem_cell[899]).
Adding EN signal on $memory\mem_cell[898]$4351 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[898][3][0]$y$39354, Q = \mem_cell[898]).
Adding EN signal on $memory\mem_cell[897]$4349 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[897][3][0]$y$39330, Q = \mem_cell[897]).
Adding EN signal on $memory\mem_cell[896]$4347 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[896][3][0]$y$39306, Q = \mem_cell[896]).
Adding EN signal on $memory\mem_cell[895]$4345 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[895][3][0]$y$39266, Q = \mem_cell[895]).
Adding EN signal on $memory\mem_cell[894]$4343 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[894][3][0]$y$39242, Q = \mem_cell[894]).
Adding EN signal on $memory\mem_cell[893]$4341 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[893][3][0]$y$39218, Q = \mem_cell[893]).
Adding EN signal on $memory\mem_cell[892]$4339 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[892][3][0]$y$39194, Q = \mem_cell[892]).
Adding EN signal on $memory\mem_cell[891]$4337 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[891][3][0]$y$39170, Q = \mem_cell[891]).
Adding EN signal on $memory\mem_cell[890]$4335 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[890][3][0]$y$39146, Q = \mem_cell[890]).
Adding EN signal on $memory\mem_cell[88]$2731 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[88][3][0]$y$19594, Q = \mem_cell[88]).
Adding EN signal on $memory\mem_cell[889]$4333 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[889][3][0]$y$39122, Q = \mem_cell[889]).
Adding EN signal on $memory\mem_cell[888]$4331 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[888][3][0]$y$39098, Q = \mem_cell[888]).
Adding EN signal on $memory\mem_cell[887]$4329 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[887][3][0]$y$39074, Q = \mem_cell[887]).
Adding EN signal on $memory\mem_cell[886]$4327 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[886][3][0]$y$39050, Q = \mem_cell[886]).
Adding EN signal on $memory\mem_cell[885]$4325 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[885][3][0]$y$39026, Q = \mem_cell[885]).
Adding EN signal on $memory\mem_cell[884]$4323 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[884][3][0]$y$39002, Q = \mem_cell[884]).
Adding EN signal on $memory\mem_cell[883]$4321 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[883][3][0]$y$38978, Q = \mem_cell[883]).
Adding EN signal on $memory\mem_cell[882]$4319 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[882][3][0]$y$38954, Q = \mem_cell[882]).
Adding EN signal on $memory\mem_cell[881]$4317 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[881][3][0]$y$38930, Q = \mem_cell[881]).
Adding EN signal on $memory\mem_cell[880]$4315 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[880][3][0]$y$38906, Q = \mem_cell[880]).
Adding EN signal on $memory\mem_cell[87]$2729 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[87][3][0]$y$19570, Q = \mem_cell[87]).
Adding EN signal on $memory\mem_cell[879]$4313 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[879][3][0]$y$38882, Q = \mem_cell[879]).
Adding EN signal on $memory\mem_cell[878]$4311 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[878][3][0]$y$38858, Q = \mem_cell[878]).
Adding EN signal on $memory\mem_cell[877]$4309 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[877][3][0]$y$38834, Q = \mem_cell[877]).
Adding EN signal on $memory\mem_cell[876]$4307 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[876][3][0]$y$38810, Q = \mem_cell[876]).
Adding EN signal on $memory\mem_cell[875]$4305 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[875][3][0]$y$38786, Q = \mem_cell[875]).
Adding EN signal on $memory\mem_cell[874]$4303 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[874][3][0]$y$38762, Q = \mem_cell[874]).
Adding EN signal on $memory\mem_cell[873]$4301 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[873][3][0]$y$38738, Q = \mem_cell[873]).
Adding EN signal on $memory\mem_cell[872]$4299 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[872][3][0]$y$38714, Q = \mem_cell[872]).
Adding EN signal on $memory\mem_cell[871]$4297 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[871][3][0]$y$38690, Q = \mem_cell[871]).
Adding EN signal on $memory\mem_cell[870]$4295 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[870][3][0]$y$38666, Q = \mem_cell[870]).
Adding EN signal on $memory\mem_cell[86]$2727 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[86][3][0]$y$19546, Q = \mem_cell[86]).
Adding EN signal on $memory\mem_cell[869]$4293 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[869][3][0]$y$38642, Q = \mem_cell[869]).
Adding EN signal on $memory\mem_cell[868]$4291 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[868][3][0]$y$38618, Q = \mem_cell[868]).
Adding EN signal on $memory\mem_cell[867]$4289 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[867][3][0]$y$38594, Q = \mem_cell[867]).
Adding EN signal on $memory\mem_cell[866]$4287 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[866][3][0]$y$38570, Q = \mem_cell[866]).
Adding EN signal on $memory\mem_cell[865]$4285 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[865][3][0]$y$38546, Q = \mem_cell[865]).
Adding EN signal on $memory\mem_cell[864]$4283 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[864][3][0]$y$38522, Q = \mem_cell[864]).
Adding EN signal on $memory\mem_cell[863]$4281 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[863][3][0]$y$38490, Q = \mem_cell[863]).
Adding EN signal on $memory\mem_cell[862]$4279 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[862][3][0]$y$38466, Q = \mem_cell[862]).
Adding EN signal on $memory\mem_cell[861]$4277 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[861][3][0]$y$38442, Q = \mem_cell[861]).
Adding EN signal on $memory\mem_cell[860]$4275 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[860][3][0]$y$38418, Q = \mem_cell[860]).
Adding EN signal on $memory\mem_cell[85]$2725 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[85][3][0]$y$19522, Q = \mem_cell[85]).
Adding EN signal on $memory\mem_cell[859]$4273 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[859][3][0]$y$38394, Q = \mem_cell[859]).
Adding EN signal on $memory\mem_cell[858]$4271 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[858][3][0]$y$38370, Q = \mem_cell[858]).
Adding EN signal on $memory\mem_cell[857]$4269 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[857][3][0]$y$38346, Q = \mem_cell[857]).
Adding EN signal on $memory\mem_cell[856]$4267 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[856][3][0]$y$38322, Q = \mem_cell[856]).
Adding EN signal on $memory\mem_cell[855]$4265 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[855][3][0]$y$38298, Q = \mem_cell[855]).
Adding EN signal on $memory\mem_cell[854]$4263 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[854][3][0]$y$38274, Q = \mem_cell[854]).
Adding EN signal on $memory\mem_cell[853]$4261 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[853][3][0]$y$38250, Q = \mem_cell[853]).
Adding EN signal on $memory\mem_cell[852]$4259 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[852][3][0]$y$38226, Q = \mem_cell[852]).
Adding EN signal on $memory\mem_cell[851]$4257 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[851][3][0]$y$38202, Q = \mem_cell[851]).
Adding EN signal on $memory\mem_cell[850]$4255 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[850][3][0]$y$38178, Q = \mem_cell[850]).
Adding EN signal on $memory\mem_cell[84]$2723 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[84][3][0]$y$19498, Q = \mem_cell[84]).
Adding EN signal on $memory\mem_cell[849]$4253 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[849][3][0]$y$38154, Q = \mem_cell[849]).
Adding EN signal on $memory\mem_cell[848]$4251 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[848][3][0]$y$38130, Q = \mem_cell[848]).
Adding EN signal on $memory\mem_cell[847]$4249 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[847][3][0]$y$38106, Q = \mem_cell[847]).
Adding EN signal on $memory\mem_cell[846]$4247 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[846][3][0]$y$38082, Q = \mem_cell[846]).
Adding EN signal on $memory\mem_cell[845]$4245 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[845][3][0]$y$38058, Q = \mem_cell[845]).
Adding EN signal on $memory\mem_cell[844]$4243 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[844][3][0]$y$38034, Q = \mem_cell[844]).
Adding EN signal on $memory\mem_cell[843]$4241 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[843][3][0]$y$38010, Q = \mem_cell[843]).
Adding EN signal on $memory\mem_cell[842]$4239 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[842][3][0]$y$37986, Q = \mem_cell[842]).
Adding EN signal on $memory\mem_cell[841]$4237 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[841][3][0]$y$37962, Q = \mem_cell[841]).
Adding EN signal on $memory\mem_cell[840]$4235 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[840][3][0]$y$37938, Q = \mem_cell[840]).
Adding EN signal on $memory\mem_cell[83]$2721 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[83][3][0]$y$19474, Q = \mem_cell[83]).
Adding EN signal on $memory\mem_cell[839]$4233 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[839][3][0]$y$37914, Q = \mem_cell[839]).
Adding EN signal on $memory\mem_cell[838]$4231 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[838][3][0]$y$37890, Q = \mem_cell[838]).
Adding EN signal on $memory\mem_cell[837]$4229 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[837][3][0]$y$37866, Q = \mem_cell[837]).
Adding EN signal on $memory\mem_cell[836]$4227 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[836][3][0]$y$37842, Q = \mem_cell[836]).
Adding EN signal on $memory\mem_cell[835]$4225 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[835][3][0]$y$37818, Q = \mem_cell[835]).
Adding EN signal on $memory\mem_cell[834]$4223 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[834][3][0]$y$37794, Q = \mem_cell[834]).
Adding EN signal on $memory\mem_cell[833]$4221 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[833][3][0]$y$37770, Q = \mem_cell[833]).
Adding EN signal on $memory\mem_cell[832]$4219 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[832][3][0]$y$37746, Q = \mem_cell[832]).
Adding EN signal on $memory\mem_cell[831]$4217 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[831][3][0]$y$37714, Q = \mem_cell[831]).
Adding EN signal on $memory\mem_cell[830]$4215 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[830][3][0]$y$37690, Q = \mem_cell[830]).
Adding EN signal on $memory\mem_cell[82]$2719 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[82][3][0]$y$19450, Q = \mem_cell[82]).
Adding EN signal on $memory\mem_cell[829]$4213 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[829][3][0]$y$37666, Q = \mem_cell[829]).
Adding EN signal on $memory\mem_cell[828]$4211 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[828][3][0]$y$37642, Q = \mem_cell[828]).
Adding EN signal on $memory\mem_cell[827]$4209 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[827][3][0]$y$37618, Q = \mem_cell[827]).
Adding EN signal on $memory\mem_cell[826]$4207 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[826][3][0]$y$37594, Q = \mem_cell[826]).
Adding EN signal on $memory\mem_cell[825]$4205 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[825][3][0]$y$37570, Q = \mem_cell[825]).
Adding EN signal on $memory\mem_cell[824]$4203 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[824][3][0]$y$37546, Q = \mem_cell[824]).
Adding EN signal on $memory\mem_cell[823]$4201 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[823][3][0]$y$37522, Q = \mem_cell[823]).
Adding EN signal on $memory\mem_cell[822]$4199 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[822][3][0]$y$37498, Q = \mem_cell[822]).
Adding EN signal on $memory\mem_cell[821]$4197 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[821][3][0]$y$37474, Q = \mem_cell[821]).
Adding EN signal on $memory\mem_cell[820]$4195 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[820][3][0]$y$37450, Q = \mem_cell[820]).
Adding EN signal on $memory\mem_cell[81]$2717 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[81][3][0]$y$19426, Q = \mem_cell[81]).
Adding EN signal on $memory\mem_cell[819]$4193 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[819][3][0]$y$37426, Q = \mem_cell[819]).
Adding EN signal on $memory\mem_cell[818]$4191 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[818][3][0]$y$37402, Q = \mem_cell[818]).
Adding EN signal on $memory\mem_cell[817]$4189 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[817][3][0]$y$37378, Q = \mem_cell[817]).
Adding EN signal on $memory\mem_cell[816]$4187 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[816][3][0]$y$37354, Q = \mem_cell[816]).
Adding EN signal on $memory\mem_cell[815]$4185 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[815][3][0]$y$37330, Q = \mem_cell[815]).
Adding EN signal on $memory\mem_cell[814]$4183 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[814][3][0]$y$37306, Q = \mem_cell[814]).
Adding EN signal on $memory\mem_cell[813]$4181 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[813][3][0]$y$37282, Q = \mem_cell[813]).
Adding EN signal on $memory\mem_cell[812]$4179 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[812][3][0]$y$37258, Q = \mem_cell[812]).
Adding EN signal on $memory\mem_cell[811]$4177 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[811][3][0]$y$37234, Q = \mem_cell[811]).
Adding EN signal on $memory\mem_cell[810]$4175 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[810][3][0]$y$37210, Q = \mem_cell[810]).
Adding EN signal on $memory\mem_cell[80]$2715 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[80][3][0]$y$19402, Q = \mem_cell[80]).
Adding EN signal on $memory\mem_cell[809]$4173 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[809][3][0]$y$37186, Q = \mem_cell[809]).
Adding EN signal on $memory\mem_cell[808]$4171 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[808][3][0]$y$37162, Q = \mem_cell[808]).
Adding EN signal on $memory\mem_cell[807]$4169 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[807][3][0]$y$37138, Q = \mem_cell[807]).
Adding EN signal on $memory\mem_cell[806]$4167 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[806][3][0]$y$37114, Q = \mem_cell[806]).
Adding EN signal on $memory\mem_cell[805]$4165 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[805][3][0]$y$37090, Q = \mem_cell[805]).
Adding EN signal on $memory\mem_cell[804]$4163 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[804][3][0]$y$37066, Q = \mem_cell[804]).
Adding EN signal on $memory\mem_cell[803]$4161 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[803][3][0]$y$37042, Q = \mem_cell[803]).
Adding EN signal on $memory\mem_cell[802]$4159 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[802][3][0]$y$37018, Q = \mem_cell[802]).
Adding EN signal on $memory\mem_cell[801]$4157 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[801][3][0]$y$36994, Q = \mem_cell[801]).
Adding EN signal on $memory\mem_cell[800]$4155 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[800][3][0]$y$36970, Q = \mem_cell[800]).
Adding EN signal on $memory\mem_cell[7]$2569 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[7][3][0]$y$17322, Q = \mem_cell[7]).
Adding EN signal on $memory\mem_cell[79]$2713 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[79][3][0]$y$19378, Q = \mem_cell[79]).
Adding EN signal on $memory\mem_cell[799]$4153 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[799][3][0]$y$36938, Q = \mem_cell[799]).
Adding EN signal on $memory\mem_cell[798]$4151 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[798][3][0]$y$36914, Q = \mem_cell[798]).
Adding EN signal on $memory\mem_cell[797]$4149 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[797][3][0]$y$36890, Q = \mem_cell[797]).
Adding EN signal on $memory\mem_cell[796]$4147 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[796][3][0]$y$36866, Q = \mem_cell[796]).
Adding EN signal on $memory\mem_cell[795]$4145 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[795][3][0]$y$36842, Q = \mem_cell[795]).
Adding EN signal on $memory\mem_cell[794]$4143 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[794][3][0]$y$36818, Q = \mem_cell[794]).
Adding EN signal on $memory\mem_cell[793]$4141 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[793][3][0]$y$36794, Q = \mem_cell[793]).
Adding EN signal on $memory\mem_cell[792]$4139 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[792][3][0]$y$36770, Q = \mem_cell[792]).
Adding EN signal on $memory\mem_cell[791]$4137 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[791][3][0]$y$36746, Q = \mem_cell[791]).
Adding EN signal on $memory\mem_cell[790]$4135 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[790][3][0]$y$36722, Q = \mem_cell[790]).
Adding EN signal on $memory\mem_cell[78]$2711 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[78][3][0]$y$19354, Q = \mem_cell[78]).
Adding EN signal on $memory\mem_cell[789]$4133 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[789][3][0]$y$36698, Q = \mem_cell[789]).
Adding EN signal on $memory\mem_cell[788]$4131 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[788][3][0]$y$36674, Q = \mem_cell[788]).
Adding EN signal on $memory\mem_cell[787]$4129 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[787][3][0]$y$36650, Q = \mem_cell[787]).
Adding EN signal on $memory\mem_cell[786]$4127 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[786][3][0]$y$36626, Q = \mem_cell[786]).
Adding EN signal on $memory\mem_cell[785]$4125 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[785][3][0]$y$36602, Q = \mem_cell[785]).
Adding EN signal on $memory\mem_cell[784]$4123 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[784][3][0]$y$36578, Q = \mem_cell[784]).
Adding EN signal on $memory\mem_cell[783]$4121 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[783][3][0]$y$36554, Q = \mem_cell[783]).
Adding EN signal on $memory\mem_cell[782]$4119 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[782][3][0]$y$36530, Q = \mem_cell[782]).
Adding EN signal on $memory\mem_cell[781]$4117 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[781][3][0]$y$36506, Q = \mem_cell[781]).
Adding EN signal on $memory\mem_cell[780]$4115 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[780][3][0]$y$36482, Q = \mem_cell[780]).
Adding EN signal on $memory\mem_cell[77]$2709 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[77][3][0]$y$19330, Q = \mem_cell[77]).
Adding EN signal on $memory\mem_cell[779]$4113 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[779][3][0]$y$36458, Q = \mem_cell[779]).
Adding EN signal on $memory\mem_cell[778]$4111 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[778][3][0]$y$36434, Q = \mem_cell[778]).
Adding EN signal on $memory\mem_cell[777]$4109 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[777][3][0]$y$36410, Q = \mem_cell[777]).
Adding EN signal on $memory\mem_cell[776]$4107 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[776][3][0]$y$36386, Q = \mem_cell[776]).
Adding EN signal on $memory\mem_cell[775]$4105 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[775][3][0]$y$36362, Q = \mem_cell[775]).
Adding EN signal on $memory\mem_cell[774]$4103 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[774][3][0]$y$36338, Q = \mem_cell[774]).
Adding EN signal on $memory\mem_cell[773]$4101 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[773][3][0]$y$36314, Q = \mem_cell[773]).
Adding EN signal on $memory\mem_cell[772]$4099 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[772][3][0]$y$36290, Q = \mem_cell[772]).
Adding EN signal on $memory\mem_cell[771]$4097 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[771][3][0]$y$36266, Q = \mem_cell[771]).
Adding EN signal on $memory\mem_cell[770]$4095 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[770][3][0]$y$36242, Q = \mem_cell[770]).
Adding EN signal on $memory\mem_cell[76]$2707 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[76][3][0]$y$19306, Q = \mem_cell[76]).
Adding EN signal on $memory\mem_cell[769]$4093 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[769][3][0]$y$36218, Q = \mem_cell[769]).
Adding EN signal on $memory\mem_cell[768]$4091 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[768][3][0]$y$36194, Q = \mem_cell[768]).
Adding EN signal on $memory\mem_cell[767]$4089 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[767][3][0]$y$36146, Q = \mem_cell[767]).
Adding EN signal on $memory\mem_cell[766]$4087 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[766][3][0]$y$36122, Q = \mem_cell[766]).
Adding EN signal on $memory\mem_cell[765]$4085 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[765][3][0]$y$36098, Q = \mem_cell[765]).
Adding EN signal on $memory\mem_cell[764]$4083 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[764][3][0]$y$36074, Q = \mem_cell[764]).
Adding EN signal on $memory\mem_cell[763]$4081 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[763][3][0]$y$36050, Q = \mem_cell[763]).
Adding EN signal on $memory\mem_cell[762]$4079 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[762][3][0]$y$36026, Q = \mem_cell[762]).
Adding EN signal on $memory\mem_cell[761]$4077 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[761][3][0]$y$36002, Q = \mem_cell[761]).
Adding EN signal on $memory\mem_cell[760]$4075 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[760][3][0]$y$35978, Q = \mem_cell[760]).
Adding EN signal on $memory\mem_cell[75]$2705 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[75][3][0]$y$19282, Q = \mem_cell[75]).
Adding EN signal on $memory\mem_cell[759]$4073 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[759][3][0]$y$35954, Q = \mem_cell[759]).
Adding EN signal on $memory\mem_cell[758]$4071 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[758][3][0]$y$35930, Q = \mem_cell[758]).
Adding EN signal on $memory\mem_cell[757]$4069 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[757][3][0]$y$35906, Q = \mem_cell[757]).
Adding EN signal on $memory\mem_cell[756]$4067 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[756][3][0]$y$35882, Q = \mem_cell[756]).
Adding EN signal on $memory\mem_cell[755]$4065 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[755][3][0]$y$35858, Q = \mem_cell[755]).
Adding EN signal on $memory\mem_cell[754]$4063 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[754][3][0]$y$35834, Q = \mem_cell[754]).
Adding EN signal on $memory\mem_cell[753]$4061 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[753][3][0]$y$35810, Q = \mem_cell[753]).
Adding EN signal on $memory\mem_cell[752]$4059 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[752][3][0]$y$35786, Q = \mem_cell[752]).
Adding EN signal on $memory\mem_cell[751]$4057 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[751][3][0]$y$35762, Q = \mem_cell[751]).
Adding EN signal on $memory\mem_cell[750]$4055 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[750][3][0]$y$35738, Q = \mem_cell[750]).
Adding EN signal on $memory\mem_cell[74]$2703 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[74][3][0]$y$19258, Q = \mem_cell[74]).
Adding EN signal on $memory\mem_cell[749]$4053 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[749][3][0]$y$35714, Q = \mem_cell[749]).
Adding EN signal on $memory\mem_cell[748]$4051 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[748][3][0]$y$35690, Q = \mem_cell[748]).
Adding EN signal on $memory\mem_cell[747]$4049 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[747][3][0]$y$35666, Q = \mem_cell[747]).
Adding EN signal on $memory\mem_cell[746]$4047 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[746][3][0]$y$35642, Q = \mem_cell[746]).
Adding EN signal on $memory\mem_cell[745]$4045 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[745][3][0]$y$35618, Q = \mem_cell[745]).
Adding EN signal on $memory\mem_cell[744]$4043 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[744][3][0]$y$35594, Q = \mem_cell[744]).
Adding EN signal on $memory\mem_cell[743]$4041 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[743][3][0]$y$35570, Q = \mem_cell[743]).
Adding EN signal on $memory\mem_cell[742]$4039 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[742][3][0]$y$35546, Q = \mem_cell[742]).
Adding EN signal on $memory\mem_cell[741]$4037 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[741][3][0]$y$35522, Q = \mem_cell[741]).
Adding EN signal on $memory\mem_cell[740]$4035 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[740][3][0]$y$35498, Q = \mem_cell[740]).
Adding EN signal on $memory\mem_cell[73]$2701 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[73][3][0]$y$19234, Q = \mem_cell[73]).
Adding EN signal on $memory\mem_cell[739]$4033 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[739][3][0]$y$35474, Q = \mem_cell[739]).
Adding EN signal on $memory\mem_cell[738]$4031 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[738][3][0]$y$35450, Q = \mem_cell[738]).
Adding EN signal on $memory\mem_cell[737]$4029 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[737][3][0]$y$35426, Q = \mem_cell[737]).
Adding EN signal on $memory\mem_cell[736]$4027 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[736][3][0]$y$35402, Q = \mem_cell[736]).
Adding EN signal on $memory\mem_cell[735]$4025 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[735][3][0]$y$35370, Q = \mem_cell[735]).
Adding EN signal on $memory\mem_cell[734]$4023 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[734][3][0]$y$35346, Q = \mem_cell[734]).
Adding EN signal on $memory\mem_cell[733]$4021 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[733][3][0]$y$35322, Q = \mem_cell[733]).
Adding EN signal on $memory\mem_cell[732]$4019 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[732][3][0]$y$35298, Q = \mem_cell[732]).
Adding EN signal on $memory\mem_cell[731]$4017 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[731][3][0]$y$35274, Q = \mem_cell[731]).
Adding EN signal on $memory\mem_cell[730]$4015 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[730][3][0]$y$35250, Q = \mem_cell[730]).
Adding EN signal on $memory\mem_cell[72]$2699 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[72][3][0]$y$19210, Q = \mem_cell[72]).
Adding EN signal on $memory\mem_cell[729]$4013 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[729][3][0]$y$35226, Q = \mem_cell[729]).
Adding EN signal on $memory\mem_cell[728]$4011 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[728][3][0]$y$35202, Q = \mem_cell[728]).
Adding EN signal on $memory\mem_cell[727]$4009 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[727][3][0]$y$35178, Q = \mem_cell[727]).
Adding EN signal on $memory\mem_cell[726]$4007 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[726][3][0]$y$35154, Q = \mem_cell[726]).
Adding EN signal on $memory\mem_cell[725]$4005 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[725][3][0]$y$35130, Q = \mem_cell[725]).
Adding EN signal on $memory\mem_cell[724]$4003 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[724][3][0]$y$35106, Q = \mem_cell[724]).
Adding EN signal on $memory\mem_cell[723]$4001 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[723][3][0]$y$35082, Q = \mem_cell[723]).
Adding EN signal on $memory\mem_cell[722]$3999 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[722][3][0]$y$35058, Q = \mem_cell[722]).
Adding EN signal on $memory\mem_cell[721]$3997 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[721][3][0]$y$35034, Q = \mem_cell[721]).
Adding EN signal on $memory\mem_cell[720]$3995 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[720][3][0]$y$35010, Q = \mem_cell[720]).
Adding EN signal on $memory\mem_cell[71]$2697 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[71][3][0]$y$19186, Q = \mem_cell[71]).
Adding EN signal on $memory\mem_cell[719]$3993 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[719][3][0]$y$34986, Q = \mem_cell[719]).
Adding EN signal on $memory\mem_cell[718]$3991 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[718][3][0]$y$34962, Q = \mem_cell[718]).
Adding EN signal on $memory\mem_cell[717]$3989 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[717][3][0]$y$34938, Q = \mem_cell[717]).
Adding EN signal on $memory\mem_cell[716]$3987 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[716][3][0]$y$34914, Q = \mem_cell[716]).
Adding EN signal on $memory\mem_cell[715]$3985 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[715][3][0]$y$34890, Q = \mem_cell[715]).
Adding EN signal on $memory\mem_cell[714]$3983 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[714][3][0]$y$34866, Q = \mem_cell[714]).
Adding EN signal on $memory\mem_cell[713]$3981 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[713][3][0]$y$34842, Q = \mem_cell[713]).
Adding EN signal on $memory\mem_cell[712]$3979 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[712][3][0]$y$34818, Q = \mem_cell[712]).
Adding EN signal on $memory\mem_cell[711]$3977 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[711][3][0]$y$34794, Q = \mem_cell[711]).
Adding EN signal on $memory\mem_cell[710]$3975 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[710][3][0]$y$34770, Q = \mem_cell[710]).
Adding EN signal on $memory\mem_cell[70]$2695 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[70][3][0]$y$19162, Q = \mem_cell[70]).
Adding EN signal on $memory\mem_cell[709]$3973 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[709][3][0]$y$34746, Q = \mem_cell[709]).
Adding EN signal on $memory\mem_cell[708]$3971 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[708][3][0]$y$34722, Q = \mem_cell[708]).
Adding EN signal on $memory\mem_cell[707]$3969 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[707][3][0]$y$34698, Q = \mem_cell[707]).
Adding EN signal on $memory\mem_cell[706]$3967 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[706][3][0]$y$34674, Q = \mem_cell[706]).
Adding EN signal on $memory\mem_cell[705]$3965 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[705][3][0]$y$34650, Q = \mem_cell[705]).
Adding EN signal on $memory\mem_cell[704]$3963 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[704][3][0]$y$34626, Q = \mem_cell[704]).
Adding EN signal on $memory\mem_cell[703]$3961 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[703][3][0]$y$34594, Q = \mem_cell[703]).
Adding EN signal on $memory\mem_cell[702]$3959 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[702][3][0]$y$34570, Q = \mem_cell[702]).
Adding EN signal on $memory\mem_cell[701]$3957 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[701][3][0]$y$34546, Q = \mem_cell[701]).
Adding EN signal on $memory\mem_cell[700]$3955 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[700][3][0]$y$34522, Q = \mem_cell[700]).
Adding EN signal on $memory\mem_cell[6]$2567 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[6][3][0]$y$17290, Q = \mem_cell[6]).
Adding EN signal on $memory\mem_cell[69]$2693 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[69][3][0]$y$19138, Q = \mem_cell[69]).
Adding EN signal on $memory\mem_cell[699]$3953 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[699][3][0]$y$34498, Q = \mem_cell[699]).
Adding EN signal on $memory\mem_cell[698]$3951 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[698][3][0]$y$34474, Q = \mem_cell[698]).
Adding EN signal on $memory\mem_cell[697]$3949 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[697][3][0]$y$34450, Q = \mem_cell[697]).
Adding EN signal on $memory\mem_cell[696]$3947 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[696][3][0]$y$34426, Q = \mem_cell[696]).
Adding EN signal on $memory\mem_cell[695]$3945 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[695][3][0]$y$34402, Q = \mem_cell[695]).
Adding EN signal on $memory\mem_cell[694]$3943 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[694][3][0]$y$34378, Q = \mem_cell[694]).
Adding EN signal on $memory\mem_cell[693]$3941 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[693][3][0]$y$34354, Q = \mem_cell[693]).
Adding EN signal on $memory\mem_cell[692]$3939 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[692][3][0]$y$34330, Q = \mem_cell[692]).
Adding EN signal on $memory\mem_cell[691]$3937 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[691][3][0]$y$34306, Q = \mem_cell[691]).
Adding EN signal on $memory\mem_cell[690]$3935 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[690][3][0]$y$34282, Q = \mem_cell[690]).
Adding EN signal on $memory\mem_cell[68]$2691 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[68][3][0]$y$19114, Q = \mem_cell[68]).
Adding EN signal on $memory\mem_cell[689]$3933 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[689][3][0]$y$34258, Q = \mem_cell[689]).
Adding EN signal on $memory\mem_cell[688]$3931 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[688][3][0]$y$34234, Q = \mem_cell[688]).
Adding EN signal on $memory\mem_cell[687]$3929 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[687][3][0]$y$34210, Q = \mem_cell[687]).
Adding EN signal on $memory\mem_cell[686]$3927 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[686][3][0]$y$34186, Q = \mem_cell[686]).
Adding EN signal on $memory\mem_cell[685]$3925 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[685][3][0]$y$34162, Q = \mem_cell[685]).
Adding EN signal on $memory\mem_cell[684]$3923 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[684][3][0]$y$34138, Q = \mem_cell[684]).
Adding EN signal on $memory\mem_cell[683]$3921 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[683][3][0]$y$34114, Q = \mem_cell[683]).
Adding EN signal on $memory\mem_cell[682]$3919 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[682][3][0]$y$34090, Q = \mem_cell[682]).
Adding EN signal on $memory\mem_cell[681]$3917 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[681][3][0]$y$34066, Q = \mem_cell[681]).
Adding EN signal on $memory\mem_cell[680]$3915 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[680][3][0]$y$34042, Q = \mem_cell[680]).
Adding EN signal on $memory\mem_cell[67]$2689 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[67][3][0]$y$19090, Q = \mem_cell[67]).
Adding EN signal on $memory\mem_cell[679]$3913 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[679][3][0]$y$34018, Q = \mem_cell[679]).
Adding EN signal on $memory\mem_cell[678]$3911 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[678][3][0]$y$33994, Q = \mem_cell[678]).
Adding EN signal on $memory\mem_cell[677]$3909 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[677][3][0]$y$33970, Q = \mem_cell[677]).
Adding EN signal on $memory\mem_cell[676]$3907 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[676][3][0]$y$33946, Q = \mem_cell[676]).
Adding EN signal on $memory\mem_cell[675]$3905 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[675][3][0]$y$33922, Q = \mem_cell[675]).
Adding EN signal on $memory\mem_cell[674]$3903 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[674][3][0]$y$33898, Q = \mem_cell[674]).
Adding EN signal on $memory\mem_cell[673]$3901 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[673][3][0]$y$33874, Q = \mem_cell[673]).
Adding EN signal on $memory\mem_cell[672]$3899 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[672][3][0]$y$33850, Q = \mem_cell[672]).
Adding EN signal on $memory\mem_cell[671]$3897 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[671][3][0]$y$33818, Q = \mem_cell[671]).
Adding EN signal on $memory\mem_cell[670]$3895 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[670][3][0]$y$33794, Q = \mem_cell[670]).
Adding EN signal on $memory\mem_cell[66]$2687 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[66][3][0]$y$19066, Q = \mem_cell[66]).
Adding EN signal on $memory\mem_cell[669]$3893 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[669][3][0]$y$33770, Q = \mem_cell[669]).
Adding EN signal on $memory\mem_cell[668]$3891 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[668][3][0]$y$33746, Q = \mem_cell[668]).
Adding EN signal on $memory\mem_cell[667]$3889 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[667][3][0]$y$33722, Q = \mem_cell[667]).
Adding EN signal on $memory\mem_cell[666]$3887 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[666][3][0]$y$33698, Q = \mem_cell[666]).
Adding EN signal on $memory\mem_cell[665]$3885 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[665][3][0]$y$33674, Q = \mem_cell[665]).
Adding EN signal on $memory\mem_cell[664]$3883 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[664][3][0]$y$33650, Q = \mem_cell[664]).
Adding EN signal on $memory\mem_cell[663]$3881 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[663][3][0]$y$33626, Q = \mem_cell[663]).
Adding EN signal on $memory\mem_cell[662]$3879 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[662][3][0]$y$33602, Q = \mem_cell[662]).
Adding EN signal on $memory\mem_cell[661]$3877 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[661][3][0]$y$33578, Q = \mem_cell[661]).
Adding EN signal on $memory\mem_cell[660]$3875 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[660][3][0]$y$33554, Q = \mem_cell[660]).
Adding EN signal on $memory\mem_cell[65]$2685 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[65][3][0]$y$19042, Q = \mem_cell[65]).
Adding EN signal on $memory\mem_cell[659]$3873 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[659][3][0]$y$33530, Q = \mem_cell[659]).
Adding EN signal on $memory\mem_cell[658]$3871 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[658][3][0]$y$33506, Q = \mem_cell[658]).
Adding EN signal on $memory\mem_cell[657]$3869 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[657][3][0]$y$33482, Q = \mem_cell[657]).
Adding EN signal on $memory\mem_cell[656]$3867 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[656][3][0]$y$33458, Q = \mem_cell[656]).
Adding EN signal on $memory\mem_cell[655]$3865 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[655][3][0]$y$33434, Q = \mem_cell[655]).
Adding EN signal on $memory\mem_cell[654]$3863 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[654][3][0]$y$33410, Q = \mem_cell[654]).
Adding EN signal on $memory\mem_cell[653]$3861 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[653][3][0]$y$33386, Q = \mem_cell[653]).
Adding EN signal on $memory\mem_cell[652]$3859 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[652][3][0]$y$33362, Q = \mem_cell[652]).
Adding EN signal on $memory\mem_cell[651]$3857 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[651][3][0]$y$33338, Q = \mem_cell[651]).
Adding EN signal on $memory\mem_cell[650]$3855 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[650][3][0]$y$33314, Q = \mem_cell[650]).
Adding EN signal on $memory\mem_cell[64]$2683 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[64][3][0]$y$19018, Q = \mem_cell[64]).
Adding EN signal on $memory\mem_cell[649]$3853 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[649][3][0]$y$33290, Q = \mem_cell[649]).
Adding EN signal on $memory\mem_cell[648]$3851 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[648][3][0]$y$33266, Q = \mem_cell[648]).
Adding EN signal on $memory\mem_cell[647]$3849 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[647][3][0]$y$33242, Q = \mem_cell[647]).
Adding EN signal on $memory\mem_cell[646]$3847 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[646][3][0]$y$33218, Q = \mem_cell[646]).
Adding EN signal on $memory\mem_cell[645]$3845 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[645][3][0]$y$33194, Q = \mem_cell[645]).
Adding EN signal on $memory\mem_cell[644]$3843 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[644][3][0]$y$33170, Q = \mem_cell[644]).
Adding EN signal on $memory\mem_cell[643]$3841 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[643][3][0]$y$33146, Q = \mem_cell[643]).
Adding EN signal on $memory\mem_cell[642]$3839 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[642][3][0]$y$33122, Q = \mem_cell[642]).
Adding EN signal on $memory\mem_cell[641]$3837 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[641][3][0]$y$33098, Q = \mem_cell[641]).
Adding EN signal on $memory\mem_cell[640]$3835 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[640][3][0]$y$33074, Q = \mem_cell[640]).
Adding EN signal on $memory\mem_cell[63]$2681 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[63][3][0]$y$18970, Q = \mem_cell[63]).
Adding EN signal on $memory\mem_cell[639]$3833 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[639][3][0]$y$33034, Q = \mem_cell[639]).
Adding EN signal on $memory\mem_cell[638]$3831 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[638][3][0]$y$33010, Q = \mem_cell[638]).
Adding EN signal on $memory\mem_cell[637]$3829 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[637][3][0]$y$32986, Q = \mem_cell[637]).
Adding EN signal on $memory\mem_cell[636]$3827 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[636][3][0]$y$32962, Q = \mem_cell[636]).
Adding EN signal on $memory\mem_cell[635]$3825 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[635][3][0]$y$32938, Q = \mem_cell[635]).
Adding EN signal on $memory\mem_cell[634]$3823 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[634][3][0]$y$32914, Q = \mem_cell[634]).
Adding EN signal on $memory\mem_cell[633]$3821 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[633][3][0]$y$32890, Q = \mem_cell[633]).
Adding EN signal on $memory\mem_cell[632]$3819 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[632][3][0]$y$32866, Q = \mem_cell[632]).
Adding EN signal on $memory\mem_cell[631]$3817 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[631][3][0]$y$32842, Q = \mem_cell[631]).
Adding EN signal on $memory\mem_cell[630]$3815 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[630][3][0]$y$32818, Q = \mem_cell[630]).
Adding EN signal on $memory\mem_cell[62]$2679 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[62][3][0]$y$18946, Q = \mem_cell[62]).
Adding EN signal on $memory\mem_cell[629]$3813 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[629][3][0]$y$32794, Q = \mem_cell[629]).
Adding EN signal on $memory\mem_cell[628]$3811 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[628][3][0]$y$32770, Q = \mem_cell[628]).
Adding EN signal on $memory\mem_cell[627]$3809 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[627][3][0]$y$32746, Q = \mem_cell[627]).
Adding EN signal on $memory\mem_cell[626]$3807 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[626][3][0]$y$32722, Q = \mem_cell[626]).
Adding EN signal on $memory\mem_cell[625]$3805 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[625][3][0]$y$32698, Q = \mem_cell[625]).
Adding EN signal on $memory\mem_cell[624]$3803 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[624][3][0]$y$32674, Q = \mem_cell[624]).
Adding EN signal on $memory\mem_cell[623]$3801 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[623][3][0]$y$32650, Q = \mem_cell[623]).
Adding EN signal on $memory\mem_cell[622]$3799 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[622][3][0]$y$32626, Q = \mem_cell[622]).
Adding EN signal on $memory\mem_cell[621]$3797 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[621][3][0]$y$32602, Q = \mem_cell[621]).
Adding EN signal on $memory\mem_cell[620]$3795 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[620][3][0]$y$32578, Q = \mem_cell[620]).
Adding EN signal on $memory\mem_cell[61]$2677 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[61][3][0]$y$18922, Q = \mem_cell[61]).
Adding EN signal on $memory\mem_cell[619]$3793 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[619][3][0]$y$32554, Q = \mem_cell[619]).
Adding EN signal on $memory\mem_cell[618]$3791 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[618][3][0]$y$32530, Q = \mem_cell[618]).
Adding EN signal on $memory\mem_cell[617]$3789 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[617][3][0]$y$32506, Q = \mem_cell[617]).
Adding EN signal on $memory\mem_cell[616]$3787 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[616][3][0]$y$32482, Q = \mem_cell[616]).
Adding EN signal on $memory\mem_cell[615]$3785 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[615][3][0]$y$32458, Q = \mem_cell[615]).
Adding EN signal on $memory\mem_cell[614]$3783 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[614][3][0]$y$32434, Q = \mem_cell[614]).
Adding EN signal on $memory\mem_cell[613]$3781 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[613][3][0]$y$32410, Q = \mem_cell[613]).
Adding EN signal on $memory\mem_cell[612]$3779 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[612][3][0]$y$32386, Q = \mem_cell[612]).
Adding EN signal on $memory\mem_cell[611]$3777 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[611][3][0]$y$32362, Q = \mem_cell[611]).
Adding EN signal on $memory\mem_cell[610]$3775 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[610][3][0]$y$32338, Q = \mem_cell[610]).
Adding EN signal on $memory\mem_cell[60]$2675 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[60][3][0]$y$18898, Q = \mem_cell[60]).
Adding EN signal on $memory\mem_cell[609]$3773 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[609][3][0]$y$32314, Q = \mem_cell[609]).
Adding EN signal on $memory\mem_cell[608]$3771 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[608][3][0]$y$32290, Q = \mem_cell[608]).
Adding EN signal on $memory\mem_cell[607]$3769 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[607][3][0]$y$32258, Q = \mem_cell[607]).
Adding EN signal on $memory\mem_cell[606]$3767 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[606][3][0]$y$32234, Q = \mem_cell[606]).
Adding EN signal on $memory\mem_cell[605]$3765 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[605][3][0]$y$32210, Q = \mem_cell[605]).
Adding EN signal on $memory\mem_cell[604]$3763 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[604][3][0]$y$32186, Q = \mem_cell[604]).
Adding EN signal on $memory\mem_cell[603]$3761 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[603][3][0]$y$32162, Q = \mem_cell[603]).
Adding EN signal on $memory\mem_cell[602]$3759 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[602][3][0]$y$32138, Q = \mem_cell[602]).
Adding EN signal on $memory\mem_cell[601]$3757 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[601][3][0]$y$32114, Q = \mem_cell[601]).
Adding EN signal on $memory\mem_cell[600]$3755 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[600][3][0]$y$32090, Q = \mem_cell[600]).
Adding EN signal on $memory\mem_cell[5]$2565 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[5][3][0]$y$17258, Q = \mem_cell[5]).
Adding EN signal on $memory\mem_cell[59]$2673 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[59][3][0]$y$18874, Q = \mem_cell[59]).
Adding EN signal on $memory\mem_cell[599]$3753 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[599][3][0]$y$32066, Q = \mem_cell[599]).
Adding EN signal on $memory\mem_cell[598]$3751 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[598][3][0]$y$32042, Q = \mem_cell[598]).
Adding EN signal on $memory\mem_cell[597]$3749 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[597][3][0]$y$32018, Q = \mem_cell[597]).
Adding EN signal on $memory\mem_cell[596]$3747 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[596][3][0]$y$31994, Q = \mem_cell[596]).
Adding EN signal on $memory\mem_cell[595]$3745 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[595][3][0]$y$31970, Q = \mem_cell[595]).
Adding EN signal on $memory\mem_cell[594]$3743 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[594][3][0]$y$31946, Q = \mem_cell[594]).
Adding EN signal on $memory\mem_cell[593]$3741 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[593][3][0]$y$31922, Q = \mem_cell[593]).
Adding EN signal on $memory\mem_cell[592]$3739 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[592][3][0]$y$31898, Q = \mem_cell[592]).
Adding EN signal on $memory\mem_cell[591]$3737 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[591][3][0]$y$31874, Q = \mem_cell[591]).
Adding EN signal on $memory\mem_cell[590]$3735 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[590][3][0]$y$31850, Q = \mem_cell[590]).
Adding EN signal on $memory\mem_cell[58]$2671 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[58][3][0]$y$18850, Q = \mem_cell[58]).
Adding EN signal on $memory\mem_cell[589]$3733 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[589][3][0]$y$31826, Q = \mem_cell[589]).
Adding EN signal on $memory\mem_cell[588]$3731 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[588][3][0]$y$31802, Q = \mem_cell[588]).
Adding EN signal on $memory\mem_cell[587]$3729 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[587][3][0]$y$31778, Q = \mem_cell[587]).
Adding EN signal on $memory\mem_cell[586]$3727 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[586][3][0]$y$31754, Q = \mem_cell[586]).
Adding EN signal on $memory\mem_cell[585]$3725 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[585][3][0]$y$31730, Q = \mem_cell[585]).
Adding EN signal on $memory\mem_cell[584]$3723 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[584][3][0]$y$31706, Q = \mem_cell[584]).
Adding EN signal on $memory\mem_cell[583]$3721 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[583][3][0]$y$31682, Q = \mem_cell[583]).
Adding EN signal on $memory\mem_cell[582]$3719 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[582][3][0]$y$31658, Q = \mem_cell[582]).
Adding EN signal on $memory\mem_cell[581]$3717 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[581][3][0]$y$31634, Q = \mem_cell[581]).
Adding EN signal on $memory\mem_cell[580]$3715 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[580][3][0]$y$31610, Q = \mem_cell[580]).
Adding EN signal on $memory\mem_cell[57]$2669 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[57][3][0]$y$18826, Q = \mem_cell[57]).
Adding EN signal on $memory\mem_cell[579]$3713 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[579][3][0]$y$31586, Q = \mem_cell[579]).
Adding EN signal on $memory\mem_cell[578]$3711 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[578][3][0]$y$31562, Q = \mem_cell[578]).
Adding EN signal on $memory\mem_cell[577]$3709 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[577][3][0]$y$31538, Q = \mem_cell[577]).
Adding EN signal on $memory\mem_cell[576]$3707 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[576][3][0]$y$31514, Q = \mem_cell[576]).
Adding EN signal on $memory\mem_cell[575]$3705 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[575][3][0]$y$31482, Q = \mem_cell[575]).
Adding EN signal on $memory\mem_cell[574]$3703 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[574][3][0]$y$31458, Q = \mem_cell[574]).
Adding EN signal on $memory\mem_cell[573]$3701 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[573][3][0]$y$31434, Q = \mem_cell[573]).
Adding EN signal on $memory\mem_cell[572]$3699 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[572][3][0]$y$31410, Q = \mem_cell[572]).
Adding EN signal on $memory\mem_cell[571]$3697 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[571][3][0]$y$31386, Q = \mem_cell[571]).
Adding EN signal on $memory\mem_cell[570]$3695 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[570][3][0]$y$31362, Q = \mem_cell[570]).
Adding EN signal on $memory\mem_cell[56]$2667 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[56][3][0]$y$18802, Q = \mem_cell[56]).
Adding EN signal on $memory\mem_cell[569]$3693 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[569][3][0]$y$31338, Q = \mem_cell[569]).
Adding EN signal on $memory\mem_cell[568]$3691 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[568][3][0]$y$31314, Q = \mem_cell[568]).
Adding EN signal on $memory\mem_cell[567]$3689 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[567][3][0]$y$31290, Q = \mem_cell[567]).
Adding EN signal on $memory\mem_cell[566]$3687 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[566][3][0]$y$31266, Q = \mem_cell[566]).
Adding EN signal on $memory\mem_cell[565]$3685 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[565][3][0]$y$31242, Q = \mem_cell[565]).
Adding EN signal on $memory\mem_cell[564]$3683 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[564][3][0]$y$31218, Q = \mem_cell[564]).
Adding EN signal on $memory\mem_cell[563]$3681 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[563][3][0]$y$31194, Q = \mem_cell[563]).
Adding EN signal on $memory\mem_cell[562]$3679 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[562][3][0]$y$31170, Q = \mem_cell[562]).
Adding EN signal on $memory\mem_cell[561]$3677 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[561][3][0]$y$31146, Q = \mem_cell[561]).
Adding EN signal on $memory\mem_cell[560]$3675 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[560][3][0]$y$31122, Q = \mem_cell[560]).
Adding EN signal on $memory\mem_cell[55]$2665 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[55][3][0]$y$18778, Q = \mem_cell[55]).
Adding EN signal on $memory\mem_cell[559]$3673 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[559][3][0]$y$31098, Q = \mem_cell[559]).
Adding EN signal on $memory\mem_cell[558]$3671 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[558][3][0]$y$31074, Q = \mem_cell[558]).
Adding EN signal on $memory\mem_cell[557]$3669 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[557][3][0]$y$31050, Q = \mem_cell[557]).
Adding EN signal on $memory\mem_cell[556]$3667 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[556][3][0]$y$31026, Q = \mem_cell[556]).
Adding EN signal on $memory\mem_cell[555]$3665 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[555][3][0]$y$31002, Q = \mem_cell[555]).
Adding EN signal on $memory\mem_cell[554]$3663 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[554][3][0]$y$30978, Q = \mem_cell[554]).
Adding EN signal on $memory\mem_cell[553]$3661 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[553][3][0]$y$30954, Q = \mem_cell[553]).
Adding EN signal on $memory\mem_cell[552]$3659 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[552][3][0]$y$30930, Q = \mem_cell[552]).
Adding EN signal on $memory\mem_cell[551]$3657 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[551][3][0]$y$30906, Q = \mem_cell[551]).
Adding EN signal on $memory\mem_cell[550]$3655 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[550][3][0]$y$30882, Q = \mem_cell[550]).
Adding EN signal on $memory\mem_cell[54]$2663 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[54][3][0]$y$18754, Q = \mem_cell[54]).
Adding EN signal on $memory\mem_cell[549]$3653 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[549][3][0]$y$30858, Q = \mem_cell[549]).
Adding EN signal on $memory\mem_cell[548]$3651 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[548][3][0]$y$30834, Q = \mem_cell[548]).
Adding EN signal on $memory\mem_cell[547]$3649 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[547][3][0]$y$30810, Q = \mem_cell[547]).
Adding EN signal on $memory\mem_cell[546]$3647 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[546][3][0]$y$30786, Q = \mem_cell[546]).
Adding EN signal on $memory\mem_cell[545]$3645 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[545][3][0]$y$30762, Q = \mem_cell[545]).
Adding EN signal on $memory\mem_cell[544]$3643 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[544][3][0]$y$30738, Q = \mem_cell[544]).
Adding EN signal on $memory\mem_cell[543]$3641 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[543][3][0]$y$30706, Q = \mem_cell[543]).
Adding EN signal on $memory\mem_cell[542]$3639 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[542][3][0]$y$30682, Q = \mem_cell[542]).
Adding EN signal on $memory\mem_cell[541]$3637 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[541][3][0]$y$30658, Q = \mem_cell[541]).
Adding EN signal on $memory\mem_cell[540]$3635 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[540][3][0]$y$30634, Q = \mem_cell[540]).
Adding EN signal on $memory\mem_cell[53]$2661 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[53][3][0]$y$18730, Q = \mem_cell[53]).
Adding EN signal on $memory\mem_cell[539]$3633 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[539][3][0]$y$30610, Q = \mem_cell[539]).
Adding EN signal on $memory\mem_cell[538]$3631 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[538][3][0]$y$30586, Q = \mem_cell[538]).
Adding EN signal on $memory\mem_cell[537]$3629 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[537][3][0]$y$30562, Q = \mem_cell[537]).
Adding EN signal on $memory\mem_cell[536]$3627 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[536][3][0]$y$30538, Q = \mem_cell[536]).
Adding EN signal on $memory\mem_cell[535]$3625 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[535][3][0]$y$30514, Q = \mem_cell[535]).
Adding EN signal on $memory\mem_cell[534]$3623 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[534][3][0]$y$30490, Q = \mem_cell[534]).
Adding EN signal on $memory\mem_cell[533]$3621 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[533][3][0]$y$30466, Q = \mem_cell[533]).
Adding EN signal on $memory\mem_cell[532]$3619 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[532][3][0]$y$30442, Q = \mem_cell[532]).
Adding EN signal on $memory\mem_cell[531]$3617 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[531][3][0]$y$30418, Q = \mem_cell[531]).
Adding EN signal on $memory\mem_cell[530]$3615 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[530][3][0]$y$30394, Q = \mem_cell[530]).
Adding EN signal on $memory\mem_cell[52]$2659 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[52][3][0]$y$18706, Q = \mem_cell[52]).
Adding EN signal on $memory\mem_cell[529]$3613 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[529][3][0]$y$30370, Q = \mem_cell[529]).
Adding EN signal on $memory\mem_cell[528]$3611 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[528][3][0]$y$30346, Q = \mem_cell[528]).
Adding EN signal on $memory\mem_cell[527]$3609 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[527][3][0]$y$30322, Q = \mem_cell[527]).
Adding EN signal on $memory\mem_cell[526]$3607 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[526][3][0]$y$30298, Q = \mem_cell[526]).
Adding EN signal on $memory\mem_cell[525]$3605 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[525][3][0]$y$30274, Q = \mem_cell[525]).
Adding EN signal on $memory\mem_cell[524]$3603 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[524][3][0]$y$30250, Q = \mem_cell[524]).
Adding EN signal on $memory\mem_cell[523]$3601 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[523][3][0]$y$30226, Q = \mem_cell[523]).
Adding EN signal on $memory\mem_cell[522]$3599 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[522][3][0]$y$30202, Q = \mem_cell[522]).
Adding EN signal on $memory\mem_cell[521]$3597 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[521][3][0]$y$30178, Q = \mem_cell[521]).
Adding EN signal on $memory\mem_cell[520]$3595 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[520][3][0]$y$30154, Q = \mem_cell[520]).
Adding EN signal on $memory\mem_cell[51]$2657 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[51][3][0]$y$18682, Q = \mem_cell[51]).
Adding EN signal on $memory\mem_cell[519]$3593 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[519][3][0]$y$30130, Q = \mem_cell[519]).
Adding EN signal on $memory\mem_cell[518]$3591 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[518][3][0]$y$30106, Q = \mem_cell[518]).
Adding EN signal on $memory\mem_cell[517]$3589 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[517][3][0]$y$30082, Q = \mem_cell[517]).
Adding EN signal on $memory\mem_cell[516]$3587 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[516][3][0]$y$30058, Q = \mem_cell[516]).
Adding EN signal on $memory\mem_cell[515]$3585 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[515][3][0]$y$30034, Q = \mem_cell[515]).
Adding EN signal on $memory\mem_cell[514]$3583 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[514][3][0]$y$30010, Q = \mem_cell[514]).
Adding EN signal on $memory\mem_cell[513]$3581 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[513][3][0]$y$29986, Q = \mem_cell[513]).
Adding EN signal on $memory\mem_cell[512]$3579 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[512][3][0]$y$29962, Q = \mem_cell[512]).
Adding EN signal on $memory\mem_cell[511]$3577 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[511][3][0]$y$29906, Q = \mem_cell[511]).
Adding EN signal on $memory\mem_cell[510]$3575 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[510][3][0]$y$29882, Q = \mem_cell[510]).
Adding EN signal on $memory\mem_cell[50]$2655 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[50][3][0]$y$18658, Q = \mem_cell[50]).
Adding EN signal on $memory\mem_cell[509]$3573 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[509][3][0]$y$29858, Q = \mem_cell[509]).
Adding EN signal on $memory\mem_cell[508]$3571 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[508][3][0]$y$29834, Q = \mem_cell[508]).
Adding EN signal on $memory\mem_cell[507]$3569 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[507][3][0]$y$29810, Q = \mem_cell[507]).
Adding EN signal on $memory\mem_cell[506]$3567 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[506][3][0]$y$29786, Q = \mem_cell[506]).
Adding EN signal on $memory\mem_cell[505]$3565 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[505][3][0]$y$29762, Q = \mem_cell[505]).
Adding EN signal on $memory\mem_cell[504]$3563 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[504][3][0]$y$29738, Q = \mem_cell[504]).
Adding EN signal on $memory\mem_cell[503]$3561 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[503][3][0]$y$29714, Q = \mem_cell[503]).
Adding EN signal on $memory\mem_cell[502]$3559 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[502][3][0]$y$29690, Q = \mem_cell[502]).
Adding EN signal on $memory\mem_cell[501]$3557 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[501][3][0]$y$29666, Q = \mem_cell[501]).
Adding EN signal on $memory\mem_cell[500]$3555 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[500][3][0]$y$29642, Q = \mem_cell[500]).
Adding EN signal on $memory\mem_cell[4]$2563 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[4][3][0]$y$17226, Q = \mem_cell[4]).
Adding EN signal on $memory\mem_cell[49]$2653 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[49][3][0]$y$18634, Q = \mem_cell[49]).
Adding EN signal on $memory\mem_cell[499]$3553 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[499][3][0]$y$29618, Q = \mem_cell[499]).
Adding EN signal on $memory\mem_cell[498]$3551 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[498][3][0]$y$29594, Q = \mem_cell[498]).
Adding EN signal on $memory\mem_cell[497]$3549 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[497][3][0]$y$29570, Q = \mem_cell[497]).
Adding EN signal on $memory\mem_cell[496]$3547 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[496][3][0]$y$29546, Q = \mem_cell[496]).
Adding EN signal on $memory\mem_cell[495]$3545 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[495][3][0]$y$29522, Q = \mem_cell[495]).
Adding EN signal on $memory\mem_cell[494]$3543 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[494][3][0]$y$29498, Q = \mem_cell[494]).
Adding EN signal on $memory\mem_cell[493]$3541 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[493][3][0]$y$29474, Q = \mem_cell[493]).
Adding EN signal on $memory\mem_cell[492]$3539 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[492][3][0]$y$29450, Q = \mem_cell[492]).
Adding EN signal on $memory\mem_cell[491]$3537 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[491][3][0]$y$29426, Q = \mem_cell[491]).
Adding EN signal on $memory\mem_cell[490]$3535 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[490][3][0]$y$29402, Q = \mem_cell[490]).
Adding EN signal on $memory\mem_cell[48]$2651 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[48][3][0]$y$18610, Q = \mem_cell[48]).
Adding EN signal on $memory\mem_cell[489]$3533 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[489][3][0]$y$29378, Q = \mem_cell[489]).
Adding EN signal on $memory\mem_cell[488]$3531 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[488][3][0]$y$29354, Q = \mem_cell[488]).
Adding EN signal on $memory\mem_cell[487]$3529 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[487][3][0]$y$29330, Q = \mem_cell[487]).
Adding EN signal on $memory\mem_cell[486]$3527 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[486][3][0]$y$29306, Q = \mem_cell[486]).
Adding EN signal on $memory\mem_cell[485]$3525 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[485][3][0]$y$29282, Q = \mem_cell[485]).
Adding EN signal on $memory\mem_cell[484]$3523 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[484][3][0]$y$29258, Q = \mem_cell[484]).
Adding EN signal on $memory\mem_cell[483]$3521 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[483][3][0]$y$29234, Q = \mem_cell[483]).
Adding EN signal on $memory\mem_cell[482]$3519 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[482][3][0]$y$29210, Q = \mem_cell[482]).
Adding EN signal on $memory\mem_cell[481]$3517 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[481][3][0]$y$29186, Q = \mem_cell[481]).
Adding EN signal on $memory\mem_cell[480]$3515 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[480][3][0]$y$29162, Q = \mem_cell[480]).
Adding EN signal on $memory\mem_cell[47]$2649 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[47][3][0]$y$18586, Q = \mem_cell[47]).
Adding EN signal on $memory\mem_cell[479]$3513 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[479][3][0]$y$29130, Q = \mem_cell[479]).
Adding EN signal on $memory\mem_cell[478]$3511 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[478][3][0]$y$29106, Q = \mem_cell[478]).
Adding EN signal on $memory\mem_cell[477]$3509 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[477][3][0]$y$29082, Q = \mem_cell[477]).
Adding EN signal on $memory\mem_cell[476]$3507 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[476][3][0]$y$29058, Q = \mem_cell[476]).
Adding EN signal on $memory\mem_cell[475]$3505 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[475][3][0]$y$29034, Q = \mem_cell[475]).
Adding EN signal on $memory\mem_cell[474]$3503 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[474][3][0]$y$29010, Q = \mem_cell[474]).
Adding EN signal on $memory\mem_cell[473]$3501 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[473][3][0]$y$28986, Q = \mem_cell[473]).
Adding EN signal on $memory\mem_cell[472]$3499 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[472][3][0]$y$28962, Q = \mem_cell[472]).
Adding EN signal on $memory\mem_cell[471]$3497 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[471][3][0]$y$28938, Q = \mem_cell[471]).
Adding EN signal on $memory\mem_cell[470]$3495 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[470][3][0]$y$28914, Q = \mem_cell[470]).
Adding EN signal on $memory\mem_cell[46]$2647 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[46][3][0]$y$18562, Q = \mem_cell[46]).
Adding EN signal on $memory\mem_cell[469]$3493 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[469][3][0]$y$28890, Q = \mem_cell[469]).
Adding EN signal on $memory\mem_cell[468]$3491 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[468][3][0]$y$28866, Q = \mem_cell[468]).
Adding EN signal on $memory\mem_cell[467]$3489 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[467][3][0]$y$28842, Q = \mem_cell[467]).
Adding EN signal on $memory\mem_cell[466]$3487 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[466][3][0]$y$28818, Q = \mem_cell[466]).
Adding EN signal on $memory\mem_cell[465]$3485 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[465][3][0]$y$28794, Q = \mem_cell[465]).
Adding EN signal on $memory\mem_cell[464]$3483 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[464][3][0]$y$28770, Q = \mem_cell[464]).
Adding EN signal on $memory\mem_cell[463]$3481 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[463][3][0]$y$28746, Q = \mem_cell[463]).
Adding EN signal on $memory\mem_cell[462]$3479 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[462][3][0]$y$28722, Q = \mem_cell[462]).
Adding EN signal on $memory\mem_cell[461]$3477 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[461][3][0]$y$28698, Q = \mem_cell[461]).
Adding EN signal on $memory\mem_cell[460]$3475 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[460][3][0]$y$28674, Q = \mem_cell[460]).
Adding EN signal on $memory\mem_cell[45]$2645 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[45][3][0]$y$18538, Q = \mem_cell[45]).
Adding EN signal on $memory\mem_cell[459]$3473 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[459][3][0]$y$28650, Q = \mem_cell[459]).
Adding EN signal on $memory\mem_cell[458]$3471 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[458][3][0]$y$28626, Q = \mem_cell[458]).
Adding EN signal on $memory\mem_cell[457]$3469 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[457][3][0]$y$28602, Q = \mem_cell[457]).
Adding EN signal on $memory\mem_cell[456]$3467 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[456][3][0]$y$28578, Q = \mem_cell[456]).
Adding EN signal on $memory\mem_cell[455]$3465 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[455][3][0]$y$28554, Q = \mem_cell[455]).
Adding EN signal on $memory\mem_cell[454]$3463 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[454][3][0]$y$28530, Q = \mem_cell[454]).
Adding EN signal on $memory\mem_cell[453]$3461 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[453][3][0]$y$28506, Q = \mem_cell[453]).
Adding EN signal on $memory\mem_cell[452]$3459 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[452][3][0]$y$28482, Q = \mem_cell[452]).
Adding EN signal on $memory\mem_cell[451]$3457 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[451][3][0]$y$28458, Q = \mem_cell[451]).
Adding EN signal on $memory\mem_cell[450]$3455 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[450][3][0]$y$28434, Q = \mem_cell[450]).
Adding EN signal on $memory\mem_cell[44]$2643 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[44][3][0]$y$18514, Q = \mem_cell[44]).
Adding EN signal on $memory\mem_cell[449]$3453 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[449][3][0]$y$28410, Q = \mem_cell[449]).
Adding EN signal on $memory\mem_cell[448]$3451 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[448][3][0]$y$28386, Q = \mem_cell[448]).
Adding EN signal on $memory\mem_cell[447]$3449 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[447][3][0]$y$28354, Q = \mem_cell[447]).
Adding EN signal on $memory\mem_cell[446]$3447 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[446][3][0]$y$28330, Q = \mem_cell[446]).
Adding EN signal on $memory\mem_cell[445]$3445 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[445][3][0]$y$28306, Q = \mem_cell[445]).
Adding EN signal on $memory\mem_cell[444]$3443 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[444][3][0]$y$28282, Q = \mem_cell[444]).
Adding EN signal on $memory\mem_cell[443]$3441 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[443][3][0]$y$28258, Q = \mem_cell[443]).
Adding EN signal on $memory\mem_cell[442]$3439 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[442][3][0]$y$28234, Q = \mem_cell[442]).
Adding EN signal on $memory\mem_cell[441]$3437 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[441][3][0]$y$28210, Q = \mem_cell[441]).
Adding EN signal on $memory\mem_cell[440]$3435 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[440][3][0]$y$28186, Q = \mem_cell[440]).
Adding EN signal on $memory\mem_cell[43]$2641 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[43][3][0]$y$18490, Q = \mem_cell[43]).
Adding EN signal on $memory\mem_cell[439]$3433 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[439][3][0]$y$28162, Q = \mem_cell[439]).
Adding EN signal on $memory\mem_cell[438]$3431 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[438][3][0]$y$28138, Q = \mem_cell[438]).
Adding EN signal on $memory\mem_cell[437]$3429 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[437][3][0]$y$28114, Q = \mem_cell[437]).
Adding EN signal on $memory\mem_cell[436]$3427 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[436][3][0]$y$28090, Q = \mem_cell[436]).
Adding EN signal on $memory\mem_cell[435]$3425 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[435][3][0]$y$28066, Q = \mem_cell[435]).
Adding EN signal on $memory\mem_cell[434]$3423 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[434][3][0]$y$28042, Q = \mem_cell[434]).
Adding EN signal on $memory\mem_cell[433]$3421 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[433][3][0]$y$28018, Q = \mem_cell[433]).
Adding EN signal on $memory\mem_cell[432]$3419 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[432][3][0]$y$27994, Q = \mem_cell[432]).
Adding EN signal on $memory\mem_cell[431]$3417 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[431][3][0]$y$27970, Q = \mem_cell[431]).
Adding EN signal on $memory\mem_cell[430]$3415 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[430][3][0]$y$27946, Q = \mem_cell[430]).
Adding EN signal on $memory\mem_cell[42]$2639 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[42][3][0]$y$18466, Q = \mem_cell[42]).
Adding EN signal on $memory\mem_cell[429]$3413 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[429][3][0]$y$27922, Q = \mem_cell[429]).
Adding EN signal on $memory\mem_cell[428]$3411 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[428][3][0]$y$27898, Q = \mem_cell[428]).
Adding EN signal on $memory\mem_cell[427]$3409 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[427][3][0]$y$27874, Q = \mem_cell[427]).
Adding EN signal on $memory\mem_cell[426]$3407 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[426][3][0]$y$27850, Q = \mem_cell[426]).
Adding EN signal on $memory\mem_cell[425]$3405 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[425][3][0]$y$27826, Q = \mem_cell[425]).
Adding EN signal on $memory\mem_cell[424]$3403 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[424][3][0]$y$27802, Q = \mem_cell[424]).
Adding EN signal on $memory\mem_cell[423]$3401 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[423][3][0]$y$27778, Q = \mem_cell[423]).
Adding EN signal on $memory\mem_cell[422]$3399 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[422][3][0]$y$27754, Q = \mem_cell[422]).
Adding EN signal on $memory\mem_cell[421]$3397 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[421][3][0]$y$27730, Q = \mem_cell[421]).
Adding EN signal on $memory\mem_cell[420]$3395 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[420][3][0]$y$27706, Q = \mem_cell[420]).
Adding EN signal on $memory\mem_cell[41]$2637 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[41][3][0]$y$18442, Q = \mem_cell[41]).
Adding EN signal on $memory\mem_cell[419]$3393 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[419][3][0]$y$27682, Q = \mem_cell[419]).
Adding EN signal on $memory\mem_cell[418]$3391 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[418][3][0]$y$27658, Q = \mem_cell[418]).
Adding EN signal on $memory\mem_cell[417]$3389 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[417][3][0]$y$27634, Q = \mem_cell[417]).
Adding EN signal on $memory\mem_cell[416]$3387 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[416][3][0]$y$27610, Q = \mem_cell[416]).
Adding EN signal on $memory\mem_cell[415]$3385 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[415][3][0]$y$27578, Q = \mem_cell[415]).
Adding EN signal on $memory\mem_cell[414]$3383 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[414][3][0]$y$27554, Q = \mem_cell[414]).
Adding EN signal on $memory\mem_cell[413]$3381 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[413][3][0]$y$27530, Q = \mem_cell[413]).
Adding EN signal on $memory\mem_cell[412]$3379 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[412][3][0]$y$27506, Q = \mem_cell[412]).
Adding EN signal on $memory\mem_cell[411]$3377 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[411][3][0]$y$27482, Q = \mem_cell[411]).
Adding EN signal on $memory\mem_cell[410]$3375 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[410][3][0]$y$27458, Q = \mem_cell[410]).
Adding EN signal on $memory\mem_cell[40]$2635 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[40][3][0]$y$18418, Q = \mem_cell[40]).
Adding EN signal on $memory\mem_cell[409]$3373 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[409][3][0]$y$27434, Q = \mem_cell[409]).
Adding EN signal on $memory\mem_cell[408]$3371 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[408][3][0]$y$27410, Q = \mem_cell[408]).
Adding EN signal on $memory\mem_cell[407]$3369 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[407][3][0]$y$27386, Q = \mem_cell[407]).
Adding EN signal on $memory\mem_cell[406]$3367 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[406][3][0]$y$27362, Q = \mem_cell[406]).
Adding EN signal on $memory\mem_cell[405]$3365 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[405][3][0]$y$27338, Q = \mem_cell[405]).
Adding EN signal on $memory\mem_cell[404]$3363 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[404][3][0]$y$27314, Q = \mem_cell[404]).
Adding EN signal on $memory\mem_cell[403]$3361 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[403][3][0]$y$27290, Q = \mem_cell[403]).
Adding EN signal on $memory\mem_cell[402]$3359 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[402][3][0]$y$27266, Q = \mem_cell[402]).
Adding EN signal on $memory\mem_cell[401]$3357 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[401][3][0]$y$27242, Q = \mem_cell[401]).
Adding EN signal on $memory\mem_cell[400]$3355 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[400][3][0]$y$27218, Q = \mem_cell[400]).
Adding EN signal on $memory\mem_cell[3]$2561 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[3][3][0]$y$17178, Q = \mem_cell[3]).
Adding EN signal on $memory\mem_cell[39]$2633 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[39][3][0]$y$18394, Q = \mem_cell[39]).
Adding EN signal on $memory\mem_cell[399]$3353 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[399][3][0]$y$27194, Q = \mem_cell[399]).
Adding EN signal on $memory\mem_cell[398]$3351 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[398][3][0]$y$27170, Q = \mem_cell[398]).
Adding EN signal on $memory\mem_cell[397]$3349 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[397][3][0]$y$27146, Q = \mem_cell[397]).
Adding EN signal on $memory\mem_cell[396]$3347 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[396][3][0]$y$27122, Q = \mem_cell[396]).
Adding EN signal on $memory\mem_cell[395]$3345 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[395][3][0]$y$27098, Q = \mem_cell[395]).
Adding EN signal on $memory\mem_cell[394]$3343 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[394][3][0]$y$27074, Q = \mem_cell[394]).
Adding EN signal on $memory\mem_cell[393]$3341 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[393][3][0]$y$27050, Q = \mem_cell[393]).
Adding EN signal on $memory\mem_cell[392]$3339 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[392][3][0]$y$27026, Q = \mem_cell[392]).
Adding EN signal on $memory\mem_cell[391]$3337 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[391][3][0]$y$27002, Q = \mem_cell[391]).
Adding EN signal on $memory\mem_cell[390]$3335 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[390][3][0]$y$26978, Q = \mem_cell[390]).
Adding EN signal on $memory\mem_cell[38]$2631 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[38][3][0]$y$18370, Q = \mem_cell[38]).
Adding EN signal on $memory\mem_cell[389]$3333 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[389][3][0]$y$26954, Q = \mem_cell[389]).
Adding EN signal on $memory\mem_cell[388]$3331 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[388][3][0]$y$26930, Q = \mem_cell[388]).
Adding EN signal on $memory\mem_cell[387]$3329 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[387][3][0]$y$26906, Q = \mem_cell[387]).
Adding EN signal on $memory\mem_cell[386]$3327 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[386][3][0]$y$26882, Q = \mem_cell[386]).
Adding EN signal on $memory\mem_cell[385]$3325 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[385][3][0]$y$26858, Q = \mem_cell[385]).
Adding EN signal on $memory\mem_cell[384]$3323 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[384][3][0]$y$26834, Q = \mem_cell[384]).
Adding EN signal on $memory\mem_cell[383]$3321 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[383][3][0]$y$26794, Q = \mem_cell[383]).
Adding EN signal on $memory\mem_cell[382]$3319 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[382][3][0]$y$26770, Q = \mem_cell[382]).
Adding EN signal on $memory\mem_cell[381]$3317 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[381][3][0]$y$26746, Q = \mem_cell[381]).
Adding EN signal on $memory\mem_cell[380]$3315 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[380][3][0]$y$26722, Q = \mem_cell[380]).
Adding EN signal on $memory\mem_cell[37]$2629 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[37][3][0]$y$18346, Q = \mem_cell[37]).
Adding EN signal on $memory\mem_cell[379]$3313 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[379][3][0]$y$26698, Q = \mem_cell[379]).
Adding EN signal on $memory\mem_cell[378]$3311 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[378][3][0]$y$26674, Q = \mem_cell[378]).
Adding EN signal on $memory\mem_cell[377]$3309 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[377][3][0]$y$26650, Q = \mem_cell[377]).
Adding EN signal on $memory\mem_cell[376]$3307 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[376][3][0]$y$26626, Q = \mem_cell[376]).
Adding EN signal on $memory\mem_cell[375]$3305 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[375][3][0]$y$26602, Q = \mem_cell[375]).
Adding EN signal on $memory\mem_cell[374]$3303 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[374][3][0]$y$26578, Q = \mem_cell[374]).
Adding EN signal on $memory\mem_cell[373]$3301 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[373][3][0]$y$26554, Q = \mem_cell[373]).
Adding EN signal on $memory\mem_cell[372]$3299 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[372][3][0]$y$26530, Q = \mem_cell[372]).
Adding EN signal on $memory\mem_cell[371]$3297 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[371][3][0]$y$26506, Q = \mem_cell[371]).
Adding EN signal on $memory\mem_cell[370]$3295 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[370][3][0]$y$26482, Q = \mem_cell[370]).
Adding EN signal on $memory\mem_cell[36]$2627 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[36][3][0]$y$18322, Q = \mem_cell[36]).
Adding EN signal on $memory\mem_cell[369]$3293 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[369][3][0]$y$26458, Q = \mem_cell[369]).
Adding EN signal on $memory\mem_cell[368]$3291 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[368][3][0]$y$26434, Q = \mem_cell[368]).
Adding EN signal on $memory\mem_cell[367]$3289 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[367][3][0]$y$26410, Q = \mem_cell[367]).
Adding EN signal on $memory\mem_cell[366]$3287 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[366][3][0]$y$26386, Q = \mem_cell[366]).
Adding EN signal on $memory\mem_cell[365]$3285 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[365][3][0]$y$26362, Q = \mem_cell[365]).
Adding EN signal on $memory\mem_cell[364]$3283 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[364][3][0]$y$26338, Q = \mem_cell[364]).
Adding EN signal on $memory\mem_cell[363]$3281 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[363][3][0]$y$26314, Q = \mem_cell[363]).
Adding EN signal on $memory\mem_cell[362]$3279 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[362][3][0]$y$26290, Q = \mem_cell[362]).
Adding EN signal on $memory\mem_cell[361]$3277 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[361][3][0]$y$26266, Q = \mem_cell[361]).
Adding EN signal on $memory\mem_cell[360]$3275 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[360][3][0]$y$26242, Q = \mem_cell[360]).
Adding EN signal on $memory\mem_cell[35]$2625 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[35][3][0]$y$18298, Q = \mem_cell[35]).
Adding EN signal on $memory\mem_cell[359]$3273 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[359][3][0]$y$26218, Q = \mem_cell[359]).
Adding EN signal on $memory\mem_cell[358]$3271 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[358][3][0]$y$26194, Q = \mem_cell[358]).
Adding EN signal on $memory\mem_cell[357]$3269 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[357][3][0]$y$26170, Q = \mem_cell[357]).
Adding EN signal on $memory\mem_cell[356]$3267 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[356][3][0]$y$26146, Q = \mem_cell[356]).
Adding EN signal on $memory\mem_cell[355]$3265 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[355][3][0]$y$26122, Q = \mem_cell[355]).
Adding EN signal on $memory\mem_cell[354]$3263 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[354][3][0]$y$26098, Q = \mem_cell[354]).
Adding EN signal on $memory\mem_cell[353]$3261 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[353][3][0]$y$26074, Q = \mem_cell[353]).
Adding EN signal on $memory\mem_cell[352]$3259 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[352][3][0]$y$26050, Q = \mem_cell[352]).
Adding EN signal on $memory\mem_cell[351]$3257 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[351][3][0]$y$26018, Q = \mem_cell[351]).
Adding EN signal on $memory\mem_cell[350]$3255 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[350][3][0]$y$25994, Q = \mem_cell[350]).
Adding EN signal on $memory\mem_cell[34]$2623 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[34][3][0]$y$18274, Q = \mem_cell[34]).
Adding EN signal on $memory\mem_cell[349]$3253 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[349][3][0]$y$25970, Q = \mem_cell[349]).
Adding EN signal on $memory\mem_cell[348]$3251 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[348][3][0]$y$25946, Q = \mem_cell[348]).
Adding EN signal on $memory\mem_cell[347]$3249 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[347][3][0]$y$25922, Q = \mem_cell[347]).
Adding EN signal on $memory\mem_cell[346]$3247 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[346][3][0]$y$25898, Q = \mem_cell[346]).
Adding EN signal on $memory\mem_cell[345]$3245 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[345][3][0]$y$25874, Q = \mem_cell[345]).
Adding EN signal on $memory\mem_cell[344]$3243 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[344][3][0]$y$25850, Q = \mem_cell[344]).
Adding EN signal on $memory\mem_cell[343]$3241 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[343][3][0]$y$25826, Q = \mem_cell[343]).
Adding EN signal on $memory\mem_cell[342]$3239 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[342][3][0]$y$25802, Q = \mem_cell[342]).
Adding EN signal on $memory\mem_cell[341]$3237 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[341][3][0]$y$25778, Q = \mem_cell[341]).
Adding EN signal on $memory\mem_cell[340]$3235 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[340][3][0]$y$25754, Q = \mem_cell[340]).
Adding EN signal on $memory\mem_cell[33]$2621 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[33][3][0]$y$18250, Q = \mem_cell[33]).
Adding EN signal on $memory\mem_cell[339]$3233 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[339][3][0]$y$25730, Q = \mem_cell[339]).
Adding EN signal on $memory\mem_cell[338]$3231 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[338][3][0]$y$25706, Q = \mem_cell[338]).
Adding EN signal on $memory\mem_cell[337]$3229 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[337][3][0]$y$25682, Q = \mem_cell[337]).
Adding EN signal on $memory\mem_cell[336]$3227 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[336][3][0]$y$25658, Q = \mem_cell[336]).
Adding EN signal on $memory\mem_cell[335]$3225 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[335][3][0]$y$25634, Q = \mem_cell[335]).
Adding EN signal on $memory\mem_cell[334]$3223 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[334][3][0]$y$25610, Q = \mem_cell[334]).
Adding EN signal on $memory\mem_cell[333]$3221 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[333][3][0]$y$25586, Q = \mem_cell[333]).
Adding EN signal on $memory\mem_cell[332]$3219 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[332][3][0]$y$25562, Q = \mem_cell[332]).
Adding EN signal on $memory\mem_cell[331]$3217 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[331][3][0]$y$25538, Q = \mem_cell[331]).
Adding EN signal on $memory\mem_cell[330]$3215 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[330][3][0]$y$25514, Q = \mem_cell[330]).
Adding EN signal on $memory\mem_cell[32]$2619 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[32][3][0]$y$18226, Q = \mem_cell[32]).
Adding EN signal on $memory\mem_cell[329]$3213 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[329][3][0]$y$25490, Q = \mem_cell[329]).
Adding EN signal on $memory\mem_cell[328]$3211 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[328][3][0]$y$25466, Q = \mem_cell[328]).
Adding EN signal on $memory\mem_cell[327]$3209 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[327][3][0]$y$25442, Q = \mem_cell[327]).
Adding EN signal on $memory\mem_cell[326]$3207 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[326][3][0]$y$25418, Q = \mem_cell[326]).
Adding EN signal on $memory\mem_cell[325]$3205 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[325][3][0]$y$25394, Q = \mem_cell[325]).
Adding EN signal on $memory\mem_cell[324]$3203 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[324][3][0]$y$25370, Q = \mem_cell[324]).
Adding EN signal on $memory\mem_cell[323]$3201 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[323][3][0]$y$25346, Q = \mem_cell[323]).
Adding EN signal on $memory\mem_cell[322]$3199 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[322][3][0]$y$25322, Q = \mem_cell[322]).
Adding EN signal on $memory\mem_cell[321]$3197 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[321][3][0]$y$25298, Q = \mem_cell[321]).
Adding EN signal on $memory\mem_cell[320]$3195 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[320][3][0]$y$25274, Q = \mem_cell[320]).
Adding EN signal on $memory\mem_cell[31]$2617 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[31][3][0]$y$18178, Q = \mem_cell[31]).
Adding EN signal on $memory\mem_cell[319]$3193 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[319][3][0]$y$25242, Q = \mem_cell[319]).
Adding EN signal on $memory\mem_cell[318]$3191 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[318][3][0]$y$25218, Q = \mem_cell[318]).
Adding EN signal on $memory\mem_cell[317]$3189 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[317][3][0]$y$25194, Q = \mem_cell[317]).
Adding EN signal on $memory\mem_cell[316]$3187 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[316][3][0]$y$25170, Q = \mem_cell[316]).
Adding EN signal on $memory\mem_cell[315]$3185 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[315][3][0]$y$25146, Q = \mem_cell[315]).
Adding EN signal on $memory\mem_cell[314]$3183 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[314][3][0]$y$25122, Q = \mem_cell[314]).
Adding EN signal on $memory\mem_cell[313]$3181 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[313][3][0]$y$25098, Q = \mem_cell[313]).
Adding EN signal on $memory\mem_cell[312]$3179 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[312][3][0]$y$25074, Q = \mem_cell[312]).
Adding EN signal on $memory\mem_cell[311]$3177 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[311][3][0]$y$25050, Q = \mem_cell[311]).
Adding EN signal on $memory\mem_cell[310]$3175 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[310][3][0]$y$25026, Q = \mem_cell[310]).
Adding EN signal on $memory\mem_cell[30]$2615 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[30][3][0]$y$18146, Q = \mem_cell[30]).
Adding EN signal on $memory\mem_cell[309]$3173 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[309][3][0]$y$25002, Q = \mem_cell[309]).
Adding EN signal on $memory\mem_cell[308]$3171 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[308][3][0]$y$24978, Q = \mem_cell[308]).
Adding EN signal on $memory\mem_cell[307]$3169 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[307][3][0]$y$24954, Q = \mem_cell[307]).
Adding EN signal on $memory\mem_cell[306]$3167 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[306][3][0]$y$24930, Q = \mem_cell[306]).
Adding EN signal on $memory\mem_cell[305]$3165 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[305][3][0]$y$24906, Q = \mem_cell[305]).
Adding EN signal on $memory\mem_cell[304]$3163 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[304][3][0]$y$24882, Q = \mem_cell[304]).
Adding EN signal on $memory\mem_cell[303]$3161 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[303][3][0]$y$24858, Q = \mem_cell[303]).
Adding EN signal on $memory\mem_cell[302]$3159 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[302][3][0]$y$24834, Q = \mem_cell[302]).
Adding EN signal on $memory\mem_cell[301]$3157 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[301][3][0]$y$24810, Q = \mem_cell[301]).
Adding EN signal on $memory\mem_cell[300]$3155 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[300][3][0]$y$24786, Q = \mem_cell[300]).
Adding EN signal on $memory\mem_cell[2]$2559 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[2][3][0]$y$17138, Q = \mem_cell[2]).
Adding EN signal on $memory\mem_cell[29]$2613 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[29][3][0]$y$18114, Q = \mem_cell[29]).
Adding EN signal on $memory\mem_cell[299]$3153 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[299][3][0]$y$24762, Q = \mem_cell[299]).
Adding EN signal on $memory\mem_cell[298]$3151 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[298][3][0]$y$24738, Q = \mem_cell[298]).
Adding EN signal on $memory\mem_cell[297]$3149 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[297][3][0]$y$24714, Q = \mem_cell[297]).
Adding EN signal on $memory\mem_cell[296]$3147 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[296][3][0]$y$24690, Q = \mem_cell[296]).
Adding EN signal on $memory\mem_cell[295]$3145 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[295][3][0]$y$24666, Q = \mem_cell[295]).
Adding EN signal on $memory\mem_cell[294]$3143 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[294][3][0]$y$24642, Q = \mem_cell[294]).
Adding EN signal on $memory\mem_cell[293]$3141 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[293][3][0]$y$24618, Q = \mem_cell[293]).
Adding EN signal on $memory\mem_cell[292]$3139 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[292][3][0]$y$24594, Q = \mem_cell[292]).
Adding EN signal on $memory\mem_cell[291]$3137 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[291][3][0]$y$24570, Q = \mem_cell[291]).
Adding EN signal on $memory\mem_cell[290]$3135 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[290][3][0]$y$24546, Q = \mem_cell[290]).
Adding EN signal on $memory\mem_cell[28]$2611 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[28][3][0]$y$18082, Q = \mem_cell[28]).
Adding EN signal on $memory\mem_cell[289]$3133 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[289][3][0]$y$24522, Q = \mem_cell[289]).
Adding EN signal on $memory\mem_cell[288]$3131 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[288][3][0]$y$24498, Q = \mem_cell[288]).
Adding EN signal on $memory\mem_cell[287]$3129 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[287][3][0]$y$24466, Q = \mem_cell[287]).
Adding EN signal on $memory\mem_cell[286]$3127 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[286][3][0]$y$24442, Q = \mem_cell[286]).
Adding EN signal on $memory\mem_cell[285]$3125 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[285][3][0]$y$24418, Q = \mem_cell[285]).
Adding EN signal on $memory\mem_cell[284]$3123 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[284][3][0]$y$24394, Q = \mem_cell[284]).
Adding EN signal on $memory\mem_cell[283]$3121 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[283][3][0]$y$24370, Q = \mem_cell[283]).
Adding EN signal on $memory\mem_cell[282]$3119 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[282][3][0]$y$24346, Q = \mem_cell[282]).
Adding EN signal on $memory\mem_cell[281]$3117 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[281][3][0]$y$24322, Q = \mem_cell[281]).
Adding EN signal on $memory\mem_cell[280]$3115 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[280][3][0]$y$24298, Q = \mem_cell[280]).
Adding EN signal on $memory\mem_cell[27]$2609 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[27][3][0]$y$18042, Q = \mem_cell[27]).
Adding EN signal on $memory\mem_cell[279]$3113 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[279][3][0]$y$24274, Q = \mem_cell[279]).
Adding EN signal on $memory\mem_cell[278]$3111 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[278][3][0]$y$24250, Q = \mem_cell[278]).
Adding EN signal on $memory\mem_cell[277]$3109 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[277][3][0]$y$24226, Q = \mem_cell[277]).
Adding EN signal on $memory\mem_cell[276]$3107 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[276][3][0]$y$24202, Q = \mem_cell[276]).
Adding EN signal on $memory\mem_cell[275]$3105 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[275][3][0]$y$24178, Q = \mem_cell[275]).
Adding EN signal on $memory\mem_cell[274]$3103 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[274][3][0]$y$24154, Q = \mem_cell[274]).
Adding EN signal on $memory\mem_cell[273]$3101 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[273][3][0]$y$24130, Q = \mem_cell[273]).
Adding EN signal on $memory\mem_cell[272]$3099 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[272][3][0]$y$24106, Q = \mem_cell[272]).
Adding EN signal on $memory\mem_cell[271]$3097 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[271][3][0]$y$24082, Q = \mem_cell[271]).
Adding EN signal on $memory\mem_cell[270]$3095 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[270][3][0]$y$24058, Q = \mem_cell[270]).
Adding EN signal on $memory\mem_cell[26]$2607 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[26][3][0]$y$18010, Q = \mem_cell[26]).
Adding EN signal on $memory\mem_cell[269]$3093 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[269][3][0]$y$24034, Q = \mem_cell[269]).
Adding EN signal on $memory\mem_cell[268]$3091 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[268][3][0]$y$24010, Q = \mem_cell[268]).
Adding EN signal on $memory\mem_cell[267]$3089 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[267][3][0]$y$23986, Q = \mem_cell[267]).
Adding EN signal on $memory\mem_cell[266]$3087 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[266][3][0]$y$23962, Q = \mem_cell[266]).
Adding EN signal on $memory\mem_cell[265]$3085 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[265][3][0]$y$23938, Q = \mem_cell[265]).
Adding EN signal on $memory\mem_cell[264]$3083 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[264][3][0]$y$23914, Q = \mem_cell[264]).
Adding EN signal on $memory\mem_cell[263]$3081 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[263][3][0]$y$23890, Q = \mem_cell[263]).
Adding EN signal on $memory\mem_cell[262]$3079 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[262][3][0]$y$23866, Q = \mem_cell[262]).
Adding EN signal on $memory\mem_cell[261]$3077 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[261][3][0]$y$23842, Q = \mem_cell[261]).
Adding EN signal on $memory\mem_cell[260]$3075 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[260][3][0]$y$23818, Q = \mem_cell[260]).
Adding EN signal on $memory\mem_cell[25]$2605 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[25][3][0]$y$17978, Q = \mem_cell[25]).
Adding EN signal on $memory\mem_cell[259]$3073 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[259][3][0]$y$23794, Q = \mem_cell[259]).
Adding EN signal on $memory\mem_cell[258]$3071 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[258][3][0]$y$23770, Q = \mem_cell[258]).
Adding EN signal on $memory\mem_cell[257]$3069 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[257][3][0]$y$23746, Q = \mem_cell[257]).
Adding EN signal on $memory\mem_cell[256]$3067 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[256][3][0]$y$23722, Q = \mem_cell[256]).
Adding EN signal on $memory\mem_cell[255]$3065 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[255][3][0]$y$23666, Q = \mem_cell[255]).
Adding EN signal on $memory\mem_cell[254]$3063 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[254][3][0]$y$23642, Q = \mem_cell[254]).
Adding EN signal on $memory\mem_cell[253]$3061 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[253][3][0]$y$23618, Q = \mem_cell[253]).
Adding EN signal on $memory\mem_cell[252]$3059 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[252][3][0]$y$23594, Q = \mem_cell[252]).
Adding EN signal on $memory\mem_cell[251]$3057 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[251][3][0]$y$23570, Q = \mem_cell[251]).
Adding EN signal on $memory\mem_cell[250]$3055 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[250][3][0]$y$23546, Q = \mem_cell[250]).
Adding EN signal on $memory\mem_cell[24]$2603 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[24][3][0]$y$17946, Q = \mem_cell[24]).
Adding EN signal on $memory\mem_cell[249]$3053 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[249][3][0]$y$23522, Q = \mem_cell[249]).
Adding EN signal on $memory\mem_cell[248]$3051 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[248][3][0]$y$23498, Q = \mem_cell[248]).
Adding EN signal on $memory\mem_cell[247]$3049 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[247][3][0]$y$23474, Q = \mem_cell[247]).
Adding EN signal on $memory\mem_cell[246]$3047 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[246][3][0]$y$23450, Q = \mem_cell[246]).
Adding EN signal on $memory\mem_cell[245]$3045 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[245][3][0]$y$23426, Q = \mem_cell[245]).
Adding EN signal on $memory\mem_cell[244]$3043 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[244][3][0]$y$23402, Q = \mem_cell[244]).
Adding EN signal on $memory\mem_cell[243]$3041 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[243][3][0]$y$23378, Q = \mem_cell[243]).
Adding EN signal on $memory\mem_cell[242]$3039 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[242][3][0]$y$23354, Q = \mem_cell[242]).
Adding EN signal on $memory\mem_cell[241]$3037 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[241][3][0]$y$23330, Q = \mem_cell[241]).
Adding EN signal on $memory\mem_cell[240]$3035 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[240][3][0]$y$23306, Q = \mem_cell[240]).
Adding EN signal on $memory\mem_cell[23]$2601 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[23][3][0]$y$17898, Q = \mem_cell[23]).
Adding EN signal on $memory\mem_cell[239]$3033 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[239][3][0]$y$23282, Q = \mem_cell[239]).
Adding EN signal on $memory\mem_cell[238]$3031 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[238][3][0]$y$23258, Q = \mem_cell[238]).
Adding EN signal on $memory\mem_cell[237]$3029 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[237][3][0]$y$23234, Q = \mem_cell[237]).
Adding EN signal on $memory\mem_cell[236]$3027 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[236][3][0]$y$23210, Q = \mem_cell[236]).
Adding EN signal on $memory\mem_cell[235]$3025 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[235][3][0]$y$23186, Q = \mem_cell[235]).
Adding EN signal on $memory\mem_cell[234]$3023 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[234][3][0]$y$23162, Q = \mem_cell[234]).
Adding EN signal on $memory\mem_cell[233]$3021 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[233][3][0]$y$23138, Q = \mem_cell[233]).
Adding EN signal on $memory\mem_cell[232]$3019 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[232][3][0]$y$23114, Q = \mem_cell[232]).
Adding EN signal on $memory\mem_cell[231]$3017 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[231][3][0]$y$23090, Q = \mem_cell[231]).
Adding EN signal on $memory\mem_cell[230]$3015 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[230][3][0]$y$23066, Q = \mem_cell[230]).
Adding EN signal on $memory\mem_cell[22]$2599 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[22][3][0]$y$17866, Q = \mem_cell[22]).
Adding EN signal on $memory\mem_cell[229]$3013 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[229][3][0]$y$23042, Q = \mem_cell[229]).
Adding EN signal on $memory\mem_cell[228]$3011 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[228][3][0]$y$23018, Q = \mem_cell[228]).
Adding EN signal on $memory\mem_cell[227]$3009 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[227][3][0]$y$22994, Q = \mem_cell[227]).
Adding EN signal on $memory\mem_cell[226]$3007 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[226][3][0]$y$22970, Q = \mem_cell[226]).
Adding EN signal on $memory\mem_cell[225]$3005 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[225][3][0]$y$22946, Q = \mem_cell[225]).
Adding EN signal on $memory\mem_cell[224]$3003 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[224][3][0]$y$22922, Q = \mem_cell[224]).
Adding EN signal on $memory\mem_cell[223]$3001 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[223][3][0]$y$22890, Q = \mem_cell[223]).
Adding EN signal on $memory\mem_cell[222]$2999 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[222][3][0]$y$22866, Q = \mem_cell[222]).
Adding EN signal on $memory\mem_cell[221]$2997 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[221][3][0]$y$22842, Q = \mem_cell[221]).
Adding EN signal on $memory\mem_cell[220]$2995 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[220][3][0]$y$22818, Q = \mem_cell[220]).
Adding EN signal on $memory\mem_cell[21]$2597 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[21][3][0]$y$17834, Q = \mem_cell[21]).
Adding EN signal on $memory\mem_cell[219]$2993 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[219][3][0]$y$22794, Q = \mem_cell[219]).
Adding EN signal on $memory\mem_cell[218]$2991 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[218][3][0]$y$22770, Q = \mem_cell[218]).
Adding EN signal on $memory\mem_cell[217]$2989 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[217][3][0]$y$22746, Q = \mem_cell[217]).
Adding EN signal on $memory\mem_cell[216]$2987 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[216][3][0]$y$22722, Q = \mem_cell[216]).
Adding EN signal on $memory\mem_cell[215]$2985 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[215][3][0]$y$22698, Q = \mem_cell[215]).
Adding EN signal on $memory\mem_cell[214]$2983 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[214][3][0]$y$22674, Q = \mem_cell[214]).
Adding EN signal on $memory\mem_cell[213]$2981 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[213][3][0]$y$22650, Q = \mem_cell[213]).
Adding EN signal on $memory\mem_cell[212]$2979 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[212][3][0]$y$22626, Q = \mem_cell[212]).
Adding EN signal on $memory\mem_cell[211]$2977 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[211][3][0]$y$22602, Q = \mem_cell[211]).
Adding EN signal on $memory\mem_cell[210]$2975 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[210][3][0]$y$22578, Q = \mem_cell[210]).
Adding EN signal on $memory\mem_cell[20]$2595 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[20][3][0]$y$17802, Q = \mem_cell[20]).
Adding EN signal on $memory\mem_cell[209]$2973 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[209][3][0]$y$22554, Q = \mem_cell[209]).
Adding EN signal on $memory\mem_cell[208]$2971 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[208][3][0]$y$22530, Q = \mem_cell[208]).
Adding EN signal on $memory\mem_cell[207]$2969 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[207][3][0]$y$22506, Q = \mem_cell[207]).
Adding EN signal on $memory\mem_cell[206]$2967 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[206][3][0]$y$22482, Q = \mem_cell[206]).
Adding EN signal on $memory\mem_cell[205]$2965 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[205][3][0]$y$22458, Q = \mem_cell[205]).
Adding EN signal on $memory\mem_cell[204]$2963 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[204][3][0]$y$22434, Q = \mem_cell[204]).
Adding EN signal on $memory\mem_cell[203]$2961 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[203][3][0]$y$22410, Q = \mem_cell[203]).
Adding EN signal on $memory\mem_cell[202]$2959 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[202][3][0]$y$22386, Q = \mem_cell[202]).
Adding EN signal on $memory\mem_cell[201]$2957 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[201][3][0]$y$22362, Q = \mem_cell[201]).
Adding EN signal on $memory\mem_cell[200]$2955 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[200][3][0]$y$22338, Q = \mem_cell[200]).
Adding EN signal on $memory\mem_cell[1]$2557 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1][3][0]$y$17090, Q = \mem_cell[1]).
Adding EN signal on $memory\mem_cell[19]$2593 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[19][3][0]$y$17762, Q = \mem_cell[19]).
Adding EN signal on $memory\mem_cell[199]$2953 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[199][3][0]$y$22314, Q = \mem_cell[199]).
Adding EN signal on $memory\mem_cell[198]$2951 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[198][3][0]$y$22290, Q = \mem_cell[198]).
Adding EN signal on $memory\mem_cell[197]$2949 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[197][3][0]$y$22266, Q = \mem_cell[197]).
Adding EN signal on $memory\mem_cell[196]$2947 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[196][3][0]$y$22242, Q = \mem_cell[196]).
Adding EN signal on $memory\mem_cell[195]$2945 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[195][3][0]$y$22218, Q = \mem_cell[195]).
Adding EN signal on $memory\mem_cell[194]$2943 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[194][3][0]$y$22194, Q = \mem_cell[194]).
Adding EN signal on $memory\mem_cell[193]$2941 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[193][3][0]$y$22170, Q = \mem_cell[193]).
Adding EN signal on $memory\mem_cell[192]$2939 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[192][3][0]$y$22146, Q = \mem_cell[192]).
Adding EN signal on $memory\mem_cell[191]$2937 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[191][3][0]$y$22114, Q = \mem_cell[191]).
Adding EN signal on $memory\mem_cell[190]$2935 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[190][3][0]$y$22090, Q = \mem_cell[190]).
Adding EN signal on $memory\mem_cell[18]$2591 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[18][3][0]$y$17730, Q = \mem_cell[18]).
Adding EN signal on $memory\mem_cell[189]$2933 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[189][3][0]$y$22066, Q = \mem_cell[189]).
Adding EN signal on $memory\mem_cell[188]$2931 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[188][3][0]$y$22042, Q = \mem_cell[188]).
Adding EN signal on $memory\mem_cell[187]$2929 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[187][3][0]$y$22018, Q = \mem_cell[187]).
Adding EN signal on $memory\mem_cell[186]$2927 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[186][3][0]$y$21994, Q = \mem_cell[186]).
Adding EN signal on $memory\mem_cell[185]$2925 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[185][3][0]$y$21970, Q = \mem_cell[185]).
Adding EN signal on $memory\mem_cell[184]$2923 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[184][3][0]$y$21946, Q = \mem_cell[184]).
Adding EN signal on $memory\mem_cell[183]$2921 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[183][3][0]$y$21922, Q = \mem_cell[183]).
Adding EN signal on $memory\mem_cell[182]$2919 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[182][3][0]$y$21898, Q = \mem_cell[182]).
Adding EN signal on $memory\mem_cell[181]$2917 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[181][3][0]$y$21874, Q = \mem_cell[181]).
Adding EN signal on $memory\mem_cell[180]$2915 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[180][3][0]$y$21850, Q = \mem_cell[180]).
Adding EN signal on $memory\mem_cell[17]$2589 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[17][3][0]$y$17698, Q = \mem_cell[17]).
Adding EN signal on $memory\mem_cell[179]$2913 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[179][3][0]$y$21826, Q = \mem_cell[179]).
Adding EN signal on $memory\mem_cell[178]$2911 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[178][3][0]$y$21802, Q = \mem_cell[178]).
Adding EN signal on $memory\mem_cell[177]$2909 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[177][3][0]$y$21778, Q = \mem_cell[177]).
Adding EN signal on $memory\mem_cell[176]$2907 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[176][3][0]$y$21754, Q = \mem_cell[176]).
Adding EN signal on $memory\mem_cell[175]$2905 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[175][3][0]$y$21730, Q = \mem_cell[175]).
Adding EN signal on $memory\mem_cell[174]$2903 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[174][3][0]$y$21706, Q = \mem_cell[174]).
Adding EN signal on $memory\mem_cell[173]$2901 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[173][3][0]$y$21682, Q = \mem_cell[173]).
Adding EN signal on $memory\mem_cell[172]$2899 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[172][3][0]$y$21658, Q = \mem_cell[172]).
Adding EN signal on $memory\mem_cell[171]$2897 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[171][3][0]$y$21634, Q = \mem_cell[171]).
Adding EN signal on $memory\mem_cell[170]$2895 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[170][3][0]$y$21610, Q = \mem_cell[170]).
Adding EN signal on $memory\mem_cell[16]$2587 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[16][3][0]$y$17666, Q = \mem_cell[16]).
Adding EN signal on $memory\mem_cell[169]$2893 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[169][3][0]$y$21586, Q = \mem_cell[169]).
Adding EN signal on $memory\mem_cell[168]$2891 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[168][3][0]$y$21562, Q = \mem_cell[168]).
Adding EN signal on $memory\mem_cell[167]$2889 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[167][3][0]$y$21538, Q = \mem_cell[167]).
Adding EN signal on $memory\mem_cell[166]$2887 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[166][3][0]$y$21514, Q = \mem_cell[166]).
Adding EN signal on $memory\mem_cell[165]$2885 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[165][3][0]$y$21490, Q = \mem_cell[165]).
Adding EN signal on $memory\mem_cell[164]$2883 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[164][3][0]$y$21466, Q = \mem_cell[164]).
Adding EN signal on $memory\mem_cell[163]$2881 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[163][3][0]$y$21442, Q = \mem_cell[163]).
Adding EN signal on $memory\mem_cell[162]$2879 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[162][3][0]$y$21418, Q = \mem_cell[162]).
Adding EN signal on $memory\mem_cell[161]$2877 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[161][3][0]$y$21394, Q = \mem_cell[161]).
Adding EN signal on $memory\mem_cell[160]$2875 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[160][3][0]$y$21370, Q = \mem_cell[160]).
Adding EN signal on $memory\mem_cell[15]$2585 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[15][3][0]$y$17610, Q = \mem_cell[15]).
Adding EN signal on $memory\mem_cell[159]$2873 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[159][3][0]$y$21338, Q = \mem_cell[159]).
Adding EN signal on $memory\mem_cell[158]$2871 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[158][3][0]$y$21314, Q = \mem_cell[158]).
Adding EN signal on $memory\mem_cell[157]$2869 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[157][3][0]$y$21290, Q = \mem_cell[157]).
Adding EN signal on $memory\mem_cell[156]$2867 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[156][3][0]$y$21266, Q = \mem_cell[156]).
Adding EN signal on $memory\mem_cell[155]$2865 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[155][3][0]$y$21242, Q = \mem_cell[155]).
Adding EN signal on $memory\mem_cell[154]$2863 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[154][3][0]$y$21218, Q = \mem_cell[154]).
Adding EN signal on $memory\mem_cell[153]$2861 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[153][3][0]$y$21194, Q = \mem_cell[153]).
Adding EN signal on $memory\mem_cell[152]$2859 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[152][3][0]$y$21170, Q = \mem_cell[152]).
Adding EN signal on $memory\mem_cell[151]$2857 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[151][3][0]$y$21146, Q = \mem_cell[151]).
Adding EN signal on $memory\mem_cell[150]$2855 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[150][3][0]$y$21122, Q = \mem_cell[150]).
Adding EN signal on $memory\mem_cell[14]$2583 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[14][3][0]$y$17578, Q = \mem_cell[14]).
Adding EN signal on $memory\mem_cell[149]$2853 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[149][3][0]$y$21098, Q = \mem_cell[149]).
Adding EN signal on $memory\mem_cell[148]$2851 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[148][3][0]$y$21074, Q = \mem_cell[148]).
Adding EN signal on $memory\mem_cell[147]$2849 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[147][3][0]$y$21050, Q = \mem_cell[147]).
Adding EN signal on $memory\mem_cell[146]$2847 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[146][3][0]$y$21026, Q = \mem_cell[146]).
Adding EN signal on $memory\mem_cell[145]$2845 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[145][3][0]$y$21002, Q = \mem_cell[145]).
Adding EN signal on $memory\mem_cell[144]$2843 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[144][3][0]$y$20978, Q = \mem_cell[144]).
Adding EN signal on $memory\mem_cell[143]$2841 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[143][3][0]$y$20954, Q = \mem_cell[143]).
Adding EN signal on $memory\mem_cell[142]$2839 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[142][3][0]$y$20930, Q = \mem_cell[142]).
Adding EN signal on $memory\mem_cell[141]$2837 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[141][3][0]$y$20906, Q = \mem_cell[141]).
Adding EN signal on $memory\mem_cell[140]$2835 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[140][3][0]$y$20882, Q = \mem_cell[140]).
Adding EN signal on $memory\mem_cell[13]$2581 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[13][3][0]$y$17546, Q = \mem_cell[13]).
Adding EN signal on $memory\mem_cell[139]$2833 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[139][3][0]$y$20858, Q = \mem_cell[139]).
Adding EN signal on $memory\mem_cell[138]$2831 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[138][3][0]$y$20834, Q = \mem_cell[138]).
Adding EN signal on $memory\mem_cell[137]$2829 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[137][3][0]$y$20810, Q = \mem_cell[137]).
Adding EN signal on $memory\mem_cell[136]$2827 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[136][3][0]$y$20786, Q = \mem_cell[136]).
Adding EN signal on $memory\mem_cell[135]$2825 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[135][3][0]$y$20762, Q = \mem_cell[135]).
Adding EN signal on $memory\mem_cell[134]$2823 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[134][3][0]$y$20738, Q = \mem_cell[134]).
Adding EN signal on $memory\mem_cell[133]$2821 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[133][3][0]$y$20714, Q = \mem_cell[133]).
Adding EN signal on $memory\mem_cell[132]$2819 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[132][3][0]$y$20690, Q = \mem_cell[132]).
Adding EN signal on $memory\mem_cell[131]$2817 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[131][3][0]$y$20666, Q = \mem_cell[131]).
Adding EN signal on $memory\mem_cell[130]$2815 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[130][3][0]$y$20642, Q = \mem_cell[130]).
Adding EN signal on $memory\mem_cell[12]$2579 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[12][3][0]$y$17514, Q = \mem_cell[12]).
Adding EN signal on $memory\mem_cell[129]$2813 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[129][3][0]$y$20618, Q = \mem_cell[129]).
Adding EN signal on $memory\mem_cell[128]$2811 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[128][3][0]$y$20594, Q = \mem_cell[128]).
Adding EN signal on $memory\mem_cell[127]$2809 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[127][3][0]$y$20546, Q = \mem_cell[127]).
Adding EN signal on $memory\mem_cell[126]$2807 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[126][3][0]$y$20522, Q = \mem_cell[126]).
Adding EN signal on $memory\mem_cell[125]$2805 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[125][3][0]$y$20498, Q = \mem_cell[125]).
Adding EN signal on $memory\mem_cell[124]$2803 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[124][3][0]$y$20474, Q = \mem_cell[124]).
Adding EN signal on $memory\mem_cell[123]$2801 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[123][3][0]$y$20450, Q = \mem_cell[123]).
Adding EN signal on $memory\mem_cell[122]$2799 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[122][3][0]$y$20426, Q = \mem_cell[122]).
Adding EN signal on $memory\mem_cell[121]$2797 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[121][3][0]$y$20402, Q = \mem_cell[121]).
Adding EN signal on $memory\mem_cell[120]$2795 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[120][3][0]$y$20378, Q = \mem_cell[120]).
Adding EN signal on $memory\mem_cell[11]$2577 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[11][3][0]$y$17474, Q = \mem_cell[11]).
Adding EN signal on $memory\mem_cell[119]$2793 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[119][3][0]$y$20354, Q = \mem_cell[119]).
Adding EN signal on $memory\mem_cell[118]$2791 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[118][3][0]$y$20330, Q = \mem_cell[118]).
Adding EN signal on $memory\mem_cell[117]$2789 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[117][3][0]$y$20306, Q = \mem_cell[117]).
Adding EN signal on $memory\mem_cell[116]$2787 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[116][3][0]$y$20282, Q = \mem_cell[116]).
Adding EN signal on $memory\mem_cell[115]$2785 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[115][3][0]$y$20258, Q = \mem_cell[115]).
Adding EN signal on $memory\mem_cell[114]$2783 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[114][3][0]$y$20234, Q = \mem_cell[114]).
Adding EN signal on $memory\mem_cell[113]$2781 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[113][3][0]$y$20210, Q = \mem_cell[113]).
Adding EN signal on $memory\mem_cell[112]$2779 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[112][3][0]$y$20186, Q = \mem_cell[112]).
Adding EN signal on $memory\mem_cell[111]$2777 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[111][3][0]$y$20162, Q = \mem_cell[111]).
Adding EN signal on $memory\mem_cell[110]$2775 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[110][3][0]$y$20138, Q = \mem_cell[110]).
Adding EN signal on $memory\mem_cell[10]$2575 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[10][3][0]$y$17442, Q = \mem_cell[10]).
Adding EN signal on $memory\mem_cell[109]$2773 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[109][3][0]$y$20114, Q = \mem_cell[109]).
Adding EN signal on $memory\mem_cell[108]$2771 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[108][3][0]$y$20090, Q = \mem_cell[108]).
Adding EN signal on $memory\mem_cell[107]$2769 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[107][3][0]$y$20066, Q = \mem_cell[107]).
Adding EN signal on $memory\mem_cell[106]$2767 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[106][3][0]$y$20042, Q = \mem_cell[106]).
Adding EN signal on $memory\mem_cell[105]$2765 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[105][3][0]$y$20018, Q = \mem_cell[105]).
Adding EN signal on $memory\mem_cell[104]$2763 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[104][3][0]$y$19994, Q = \mem_cell[104]).
Adding EN signal on $memory\mem_cell[103]$2761 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[103][3][0]$y$19970, Q = \mem_cell[103]).
Adding EN signal on $memory\mem_cell[102]$2759 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[102][3][0]$y$19946, Q = \mem_cell[102]).
Adding EN signal on $memory\mem_cell[1023]$4601 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1023][3][0]$y$42378, Q = \mem_cell[1023]).
Adding EN signal on $memory\mem_cell[1022]$4599 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1022][3][0]$y$42354, Q = \mem_cell[1022]).
Adding EN signal on $memory\mem_cell[1021]$4597 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1021][3][0]$y$42330, Q = \mem_cell[1021]).
Adding EN signal on $memory\mem_cell[1020]$4595 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1020][3][0]$y$42306, Q = \mem_cell[1020]).
Adding EN signal on $memory\mem_cell[101]$2757 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[101][3][0]$y$19922, Q = \mem_cell[101]).
Adding EN signal on $memory\mem_cell[1019]$4593 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1019][3][0]$y$42282, Q = \mem_cell[1019]).
Adding EN signal on $memory\mem_cell[1018]$4591 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1018][3][0]$y$42258, Q = \mem_cell[1018]).
Adding EN signal on $memory\mem_cell[1017]$4589 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1017][3][0]$y$42234, Q = \mem_cell[1017]).
Adding EN signal on $memory\mem_cell[1016]$4587 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1016][3][0]$y$42210, Q = \mem_cell[1016]).
Adding EN signal on $memory\mem_cell[1015]$4585 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1015][3][0]$y$42186, Q = \mem_cell[1015]).
Adding EN signal on $memory\mem_cell[1014]$4583 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1014][3][0]$y$42162, Q = \mem_cell[1014]).
Adding EN signal on $memory\mem_cell[1013]$4581 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1013][3][0]$y$42138, Q = \mem_cell[1013]).
Adding EN signal on $memory\mem_cell[1012]$4579 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1012][3][0]$y$42114, Q = \mem_cell[1012]).
Adding EN signal on $memory\mem_cell[1011]$4577 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1011][3][0]$y$42090, Q = \mem_cell[1011]).
Adding EN signal on $memory\mem_cell[1010]$4575 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1010][3][0]$y$42066, Q = \mem_cell[1010]).
Adding EN signal on $memory\mem_cell[100]$2755 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[100][3][0]$y$19898, Q = \mem_cell[100]).
Adding EN signal on $memory\mem_cell[1009]$4573 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1009][3][0]$y$42042, Q = \mem_cell[1009]).
Adding EN signal on $memory\mem_cell[1008]$4571 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1008][3][0]$y$42018, Q = \mem_cell[1008]).
Adding EN signal on $memory\mem_cell[1007]$4569 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1007][3][0]$y$41994, Q = \mem_cell[1007]).
Adding EN signal on $memory\mem_cell[1006]$4567 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1006][3][0]$y$41970, Q = \mem_cell[1006]).
Adding EN signal on $memory\mem_cell[1005]$4565 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1005][3][0]$y$41946, Q = \mem_cell[1005]).
Adding EN signal on $memory\mem_cell[1004]$4563 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1004][3][0]$y$41922, Q = \mem_cell[1004]).
Adding EN signal on $memory\mem_cell[1003]$4561 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1003][3][0]$y$41898, Q = \mem_cell[1003]).
Adding EN signal on $memory\mem_cell[1002]$4559 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1002][3][0]$y$41874, Q = \mem_cell[1002]).
Adding EN signal on $memory\mem_cell[1001]$4557 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1001][3][0]$y$41850, Q = \mem_cell[1001]).
Adding EN signal on $memory\mem_cell[1000]$4555 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[1000][3][0]$y$41826, Q = \mem_cell[1000]).
Adding EN signal on $memory\mem_cell[0]$2555 ($dff) from module Data_memory (D = $memory\mem_cell$wrmux[0][3][0]$y$17044, Q = \mem_cell[0]).

11.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
<suppressed ~2048 debug messages>
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.19.18. Rerunning OPT passes. (Maybe there is more to do..)

11.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1552 debug messages>

11.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.19.22. Executing OPT_SHARE pass.

11.19.23. Executing OPT_DFF pass (perform DFF optimizations).

11.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 0 unused cells and 1024 unused wires.
<suppressed ~1 debug messages>

11.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.19.26. Rerunning OPT passes. (Maybe there is more to do..)

11.19.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Data_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Program_Counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RISC_V..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1552 debug messages>

11.19.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \Control_unit.
  Optimizing cells in module \Data_memory.
  Optimizing cells in module \Instruction_decoder.
  Optimizing cells in module \Instruction_memory.
  Optimizing cells in module \Multiplexers.
  Optimizing cells in module \Program_Counter.
  Optimizing cells in module \RISC_V.
  Optimizing cells in module \Registers.
Performed a total of 0 changes.

11.19.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
Finding identical cells in module `\Data_memory'.
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 0 cells.

11.19.30. Executing OPT_SHARE pass.

11.19.31. Executing OPT_DFF pass (perform DFF optimizations).

11.19.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..

11.19.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module Control_unit.
Optimizing module Data_memory.
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.19.34. Finished OPT passes. (There is nothing left to do.)

11.20. Executing TECHMAP pass (map to technology primitives).

11.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$b1b84ea6577090e4343ab204585f770b9ac9f33b\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:8f83be007d4cee465b45447f5e8406cdc367a830$paramod$45cbaf7091c4099803ec68f6265c30498f087d2e\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$0ae36a7056fbae1b1191049d3533163e46c0843a\_90_pmux for cells of type $pmux.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$3aebdfec64e5f53407607c4fc3bf29211d900439\_90_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_90_alu for cells of type $alu.
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$33afdd83bf3811dac2de7a968d39eea5718691bc\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$feecc7a0dbd012970970f2858f15e786e251f677\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$5180471e6f22625c8e3c4261cd538e11648586b5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$104d3d1e82b09b030a785dad8a5e608a6d4401f7\_90_pmux for cells of type $pmux.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~21330 debug messages>

11.21. Executing OPT pass (performing simple optimizations).

11.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~521 debug messages>
Optimizing module Control_unit.
<suppressed ~345 debug messages>
Optimizing module Data_memory.
<suppressed ~10492 debug messages>
Optimizing module Instruction_decoder.
<suppressed ~102 debug messages>
Optimizing module Instruction_memory.
<suppressed ~196608 debug messages>
Optimizing module Multiplexers.
<suppressed ~415 debug messages>
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.
<suppressed ~519 debug messages>

11.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
<suppressed ~672 debug messages>
Finding identical cells in module `\Control_unit'.
<suppressed ~474 debug messages>
Finding identical cells in module `\Data_memory'.
<suppressed ~12486 debug messages>
Finding identical cells in module `\Instruction_decoder'.
<suppressed ~369 debug messages>
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
<suppressed ~12 debug messages>
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
<suppressed ~1299 debug messages>
Removed a total of 5104 cells.

11.21.3. Executing OPT_DFF pass (perform DFF optimizations).

11.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 57608 unused cells and 4019 unused wires.
<suppressed ~57615 debug messages>

11.21.5. Finished fast OPT passes.

11.22. Executing ABC pass (technology mapping using ABC).

11.22.1. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
Extracted 1512 gates and 1581 wires to a netlist network with 68 inputs and 32 outputs.

11.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:               AND cells:       52
ABC RESULTS:             ORNOT cells:       51
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       48
ABC RESULTS:               MUX cells:      289
ABC RESULTS:              NAND cells:       96
ABC RESULTS:               XOR cells:      105
ABC RESULTS:                OR cells:      232
ABC RESULTS:            ANDNOT cells:      520
ABC RESULTS:        internal signals:     1481
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       32
Removing temp directory.

11.22.2. Extracting gate netlist of module `\Control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 237 gates and 263 wires to a netlist network with 24 inputs and 16 outputs.

11.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOT cells:        3
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               MUX cells:        5
ABC RESULTS:                OR cells:       90
ABC RESULTS:            ANDNOT cells:       61
ABC RESULTS:               NOR cells:       17
ABC RESULTS:        internal signals:      223
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       16
Removing temp directory.

11.22.3. Extracting gate netlist of module `\Data_memory' to `<abc-temp-dir>/input.blif'..
Extracted 61070 gates and 69308 wires to a netlist network with 8238 inputs and 9249 outputs.

11.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               AND cells:        2
ABC RESULTS:             ORNOT cells:     1047
ABC RESULTS:               NOT cells:       21
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       25
ABC RESULTS:                OR cells:     7575
ABC RESULTS:               MUX cells:    49178
ABC RESULTS:              NAND cells:     1050
ABC RESULTS:            ANDNOT cells:     2143
ABC RESULTS:        internal signals:    51821
ABC RESULTS:           input signals:     8238
ABC RESULTS:          output signals:     9249
Removing temp directory.

11.22.4. Extracting gate netlist of module `\Instruction_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 213 gates and 245 wires to a netlist network with 32 inputs and 36 outputs.

11.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.4.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       31
ABC RESULTS:              NAND cells:        6
ABC RESULTS:                OR cells:       80
ABC RESULTS:            ANDNOT cells:       67
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOR cells:        4
ABC RESULTS:        internal signals:      177
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       36
Removing temp directory.

11.22.5. Extracting gate netlist of module `\Instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 8160 gates and 16360 wires to a netlist network with 8200 inputs and 32 outputs.

11.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               MUX cells:     8160
ABC RESULTS:        internal signals:     8128
ABC RESULTS:           input signals:     8200
ABC RESULTS:          output signals:       32
Removing temp directory.

11.22.6. Extracting gate netlist of module `\Multiplexers' to `<abc-temp-dir>/input.blif'..
Extracted 718 gates and 1076 wires to a netlist network with 358 inputs and 129 outputs.

11.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.6.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       80
ABC RESULTS:               NOR cells:       29
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:       24
ABC RESULTS:              NAND cells:       40
ABC RESULTS:               XOR cells:       98
ABC RESULTS:            ANDNOT cells:      195
ABC RESULTS:                OR cells:      139
ABC RESULTS:               MUX cells:      160
ABC RESULTS:               AND cells:        6
ABC RESULTS:        internal signals:      589
ABC RESULTS:           input signals:      358
ABC RESULTS:          output signals:      129
Removing temp directory.

11.22.7. Extracting gate netlist of module `\Program_Counter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

11.22.8. Extracting gate netlist of module `\RISC_V' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

11.22.9. Extracting gate netlist of module `\Registers' to `<abc-temp-dir>/input.blif'..
Extracted 4266 gates and 5275 wires to a netlist network with 1008 inputs and 95 outputs.

11.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       65
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              NAND cells:       34
ABC RESULTS:               AND cells:        4
ABC RESULTS:                OR cells:     1775
ABC RESULTS:               MUX cells:       64
ABC RESULTS:            ANDNOT cells:     2271
ABC RESULTS:        internal signals:     4172
ABC RESULTS:           input signals:     1008
ABC RESULTS:          output signals:       95
Removing temp directory.

11.23. Executing OPT pass (performing simple optimizations).

11.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~98 debug messages>
Optimizing module Control_unit.
Optimizing module Data_memory.
<suppressed ~4089 debug messages>
Optimizing module Instruction_decoder.
Optimizing module Instruction_memory.
<suppressed ~4064 debug messages>
Optimizing module Multiplexers.
Optimizing module Program_Counter.
Optimizing module RISC_V.
Optimizing module Registers.

11.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\Control_unit'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Data_memory'.
<suppressed ~24 debug messages>
Finding identical cells in module `\Instruction_decoder'.
Finding identical cells in module `\Instruction_memory'.
Finding identical cells in module `\Multiplexers'.
Finding identical cells in module `\Program_Counter'.
Finding identical cells in module `\RISC_V'.
Finding identical cells in module `\Registers'.
Removed a total of 9 cells.

11.23.3. Executing OPT_DFF pass (perform DFF optimizations).

11.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \Control_unit..
Finding unused cells or wires in module \Data_memory..
Finding unused cells or wires in module \Instruction_decoder..
Finding unused cells or wires in module \Instruction_memory..
Finding unused cells or wires in module \Multiplexers..
Finding unused cells or wires in module \Program_Counter..
Finding unused cells or wires in module \RISC_V..
Finding unused cells or wires in module \Registers..
Removed 9 unused cells and 36426 unused wires.
<suppressed ~16 debug messages>

11.23.5. Finished fast OPT passes.

11.24. Executing HIERARCHY pass (managing design hierarchy).

11.24.1. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \ALU
Used module:     \Control_unit
Used module:     \Data_memory
Used module:     \Instruction_decoder
Used module:     \Instruction_memory
Used module:     \Multiplexers
Used module:     \Program_Counter
Used module:     \Registers

11.24.2. Analyzing design hierarchy..
Top module:  \RISC_V
Used module:     \ALU
Used module:     \Control_unit
Used module:     \Data_memory
Used module:     \Instruction_decoder
Used module:     \Instruction_memory
Used module:     \Multiplexers
Used module:     \Program_Counter
Used module:     \Registers
Removed 0 unused modules.

11.25. Printing statistics.

=== ALU ===

   Number of wires:               1415
   Number of wire bits:           1573
   Number of public wires:           6
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1441
     $_ANDNOT_                     520
     $_AND_                         52
     $_MUX_                        289
     $_NAND_                        96
     $_NOR_                         29
     $_NOT_                         47
     $_ORNOT_                       51
     $_OR_                         232
     $_XNOR_                        20
     $_XOR_                        105

=== Control_unit ===

   Number of wires:                200
   Number of wire bits:            284
   Number of public wires:          12
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                206
     $_ANDNOT_                      60
     $_AND_                          2
     $_DLATCH_N_                    13
     $_MUX_                          5
     $_NAND_                         6
     $_NOR_                         17
     $_NOT_                          3
     $_ORNOT_                       10
     $_OR_                          90

=== Data_memory ===

   Number of wires:              62039
   Number of wire bits:          69313
   Number of public wires:        1031
   Number of public wire bits:    8274
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              69263
     $_ANDNOT_                    2143
     $_AND_                          2
     $_DFFE_PP_                   8192
     $_DLATCH_N_                    32
     $_MUX_                      49178
     $_NAND_                      1048
     $_NOR_                          5
     $_NOT_                         20
     $_ORNOT_                     1043
     $_OR_                        7573
     $_XNOR_                         2
     $_XOR_                         25

=== Instruction_decoder ===

   Number of wires:                172
   Number of wire bits:            290
   Number of public wires:           8
   Number of public wire bits:      96
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                251
     $_ANDNOT_                      67
     $_DLATCH_N_                    57
     $_MUX_                         31
     $_NAND_                         6
     $_NOR_                          4
     $_ORNOT_                        6
     $_OR_                          80

=== Instruction_memory ===

   Number of wires:               8132
   Number of wire bits:          24554
   Number of public wires:           4
   Number of public wire bits:   16426
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8160
     $_MUX_                       8160

=== Multiplexers ===

   Number of wires:                677
   Number of wire bits:           1237
   Number of public wires:          21
   Number of public wire bits:     550
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                815
     $_ANDNOT_                     195
     $_AND_                          6
     $_DLATCH_N_                    32
     $_MUX_                        160
     $_NAND_                        40
     $_NOR_                         29
     $_NOT_                         80
     $_ORNOT_                       12
     $_OR_                         139
     $_XNOR_                        24
     $_XOR_                         98

=== Program_Counter ===

   Number of wires:                  4
   Number of wire bits:             66
   Number of public wires:           4
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_DFF_PP0_                     32

=== RISC_V ===

   Number of wires:                 33
   Number of wire bits:           8753
   Number of public wires:          33
   Number of public wire bits:    8753
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     ALU                             1
     Control_unit                    1
     Data_memory                     1
     Instruction_decoder             1
     Instruction_memory              1
     Multiplexers                    1
     Program_Counter                 1
     Registers                       1

=== Registers ===

   Number of wires:               4201
   Number of wire bits:           5267
   Number of public wires:          40
   Number of public wire bits:    1106
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5217
     $_ANDNOT_                    2271
     $_AND_                          4
     $_DFFE_PP0P_                  992
     $_MUX_                         64
     $_NAND_                        34
     $_NOT_                         65
     $_ORNOT_                       12
     $_OR_                        1775

=== design hierarchy ===

   RISC_V                            1
     ALU                             1
     Control_unit                    1
     Data_memory                     1
     Instruction_decoder             1
     Instruction_memory              1
     Multiplexers                    1
     Program_Counter                 1
     Registers                       1

   Number of wires:              76873
   Number of wire bits:         111337
   Number of public wires:        1159
   Number of public wire bits:   35499
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              85385
     $_ANDNOT_                    5256
     $_AND_                         66
     $_DFFE_PP0P_                  992
     $_DFFE_PP_                   8192
     $_DFF_PP0_                     32
     $_DLATCH_N_                   134
     $_MUX_                      57887
     $_NAND_                      1230
     $_NOR_                         84
     $_NOT_                        215
     $_ORNOT_                     1134
     $_OR_                        9889
     $_XNOR_                        46
     $_XOR_                        228

11.26. Executing CHECK pass (checking for obvious problems).
Checking module ALU...
Checking module Control_unit...
Checking module Data_memory...
Checking module Instruction_decoder...
Checking module Instruction_memory...
Checking module Multiplexers...
Checking module Program_Counter...
Checking module RISC_V...
Checking module Registers...
Found and reported 0 problems.

12. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 253d1f37f9, CPU: user 90.62s system 1.09s, MEM: 496.89 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 42% 9x proc_mux (40 sec), 17% 36x opt_expr (16 sec), ...
